"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var enzyme_1 = require("enzyme");
var create_theme_1 = require("./create-theme");
test('should return ThemeProvider and withTheme HOC', function () {
    var _a = create_theme_1.createTheme('any string'), ThemeProvider = _a.ThemeProvider, withTheme = _a.withTheme;
    expect(typeof withTheme).toBe('function');
    expect(ThemeProvider).toBeDefined();
});
test('should pass theme prop from Context to wrapped component', function () {
    var _a = create_theme_1.createTheme('theme'), ThemeProvider = _a.ThemeProvider, withTheme = _a.withTheme;
    var FakeComponent = jest.fn().mockReturnValue(null);
    var TestComponent = withTheme(FakeComponent);
    enzyme_1.mount(react_1.default.createElement(ThemeProvider, { value: 'yellow' },
        react_1.default.createElement(TestComponent, null)));
    expect(FakeComponent).toHaveBeenCalledWith({ theme: 'yellow' }, expect.anything());
});
test('should use theme provider theme when passed theme prop with undefined value', function () {
    var _a = create_theme_1.createTheme('theme'), ThemeProvider = _a.ThemeProvider, withTheme = _a.withTheme;
    var FakeComponent = jest.fn().mockReturnValue(null);
    var TestComponent = withTheme(FakeComponent);
    enzyme_1.mount(react_1.default.createElement(ThemeProvider, { value: 'yellow' },
        react_1.default.createElement(TestComponent, { theme: undefined })));
    expect(FakeComponent).toHaveBeenCalledWith({ theme: 'yellow' }, expect.anything());
});
test('should allow to override theme when it was passed directly as props to component', function () {
    var _a = create_theme_1.createTheme('theme'), ThemeProvider = _a.ThemeProvider, withTheme = _a.withTheme;
    var FakeComponent = jest.fn().mockReturnValue(null);
    var TestComponent = withTheme(FakeComponent);
    enzyme_1.mount(react_1.default.createElement(ThemeProvider, { value: 'yellow' },
        react_1.default.createElement(TestComponent, { theme: 'blue' })));
    expect(FakeComponent).toHaveBeenCalledWith({ theme: 'blue' }, expect.anything());
});
test('should forward ref to wrapped component', function () {
    var Component = /** @class */ (function (_super) {
        __extends(Component, _super);
        function Component() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Component.prototype.render = function () {
            return react_1.default.createElement("div", __assign({}, this.props));
        };
        return Component;
    }(react_1.default.Component));
    var _a = create_theme_1.createTheme('theme'), ThemeProvider = _a.ThemeProvider, withTheme = _a.withTheme;
    var CompWithTheme = withTheme(Component);
    var ref = react_1.default.createRef();
    enzyme_1.mount(react_1.default.createElement(ThemeProvider, { value: 'yellow' },
        react_1.default.createElement(CompWithTheme, { ref: ref })));
    expect(ref.current).toBeInstanceOf(Component);
});
test('should access to inner methods from ref in class component', function () {
    var _a, _b;
    var _c = create_theme_1.createTheme('theme'), ThemeProvider = _c.ThemeProvider, withTheme = _c.withTheme;
    var ClassComponent = /** @class */ (function (_super) {
        __extends(ClassComponent, _super);
        function ClassComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.doNothing = jest.fn();
            return _this;
        }
        ClassComponent.prototype.render = function () {
            return react_1.default.createElement("div", null);
        };
        return ClassComponent;
    }(react_1.default.Component));
    var ThemedClassComponent = withTheme(ClassComponent);
    var classComponentRef = react_1.default.createRef();
    enzyme_1.mount(react_1.default.createElement(ThemeProvider, { value: 'yellow' },
        react_1.default.createElement(ThemedClassComponent, { ref: classComponentRef })));
    (_a = classComponentRef.current) === null || _a === void 0 ? void 0 : _a.doNothing();
    expect(classComponentRef.current).toBeInstanceOf(ClassComponent);
    expect((_b = classComponentRef.current) === null || _b === void 0 ? void 0 : _b.doNothing).toBeCalledTimes(1);
});
test('should access to inner methods from ref in functional components', function () {
    var _a = create_theme_1.createTheme('theme'), ThemeProvider = _a.ThemeProvider, withTheme = _a.withTheme;
    var FuncComponent = (react_1.default.forwardRef(function (_, ref) { return react_1.default.createElement("input", { ref: ref }); }));
    var ThemedFuncComponent = withTheme(FuncComponent);
    var OtherComponent = function () {
        var funcComponentRef = react_1.default.useRef(null);
        react_1.useLayoutEffect(function () {
            var _a;
            (_a = funcComponentRef.current) === null || _a === void 0 ? void 0 : _a.focus();
        }, []);
        return (react_1.default.createElement(ThemedFuncComponent, { ref: funcComponentRef }));
    };
    var wrapper = enzyme_1.mount(react_1.default.createElement(ThemeProvider, { value: 'yellow' },
        react_1.default.createElement(OtherComponent, null)));
    expect(wrapper.find('input').is(':focus'));
});

//# sourceMappingURL=create-theme-test.js.map
