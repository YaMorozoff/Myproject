{"version":3,"sources":["create-cn.tsx"],"names":[],"mappings":"AAAA,aAAK,aAAa,GAAG;IAAE,CAAC,GAAG,EAAE,MAAM,GAAG,OAAO,GAAG,MAAM,GAAG,MAAM,CAAA;CAAE,CAAC;AAElE,wBAAgB,QAAQ,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,CAAC,EAAE,MAAM,EAAE,KAAK,CAAC,EAAE,MAAM;;uGA0C7E","file":"create-cn.d.ts","sourcesContent":["type CnModifierMap = { [key: string]: boolean | string | number };\n\nexport function createCn(blockName: string, className?: string, theme?: string) {\n    return function (\n        this: { props?: Record<string, unknown> } | void,\n        elementNameOrMods?: string | CnModifierMap,\n        mods?: CnModifierMap\n    ) {\n        if (typeof elementNameOrMods === 'string') { // create an element className\n            const out = `${blockName}__${elementNameOrMods}`;\n\n            if (mods) {\n                return `${out}${createModifiersString(out, mods)}`;\n            }\n            return out;\n        }\n\n        let out = blockName;\n        if (theme) {\n            elementNameOrMods = {\n                ...elementNameOrMods,\n                theme\n            };\n        }\n        if (typeof className === 'string') { // external className provided as factory argument\n            out += ` ${className}`;\n        } else if (typeof this === 'object' && this.props) { // external className from props\n            if (this.props.className && typeof this.props.className === 'string') {\n                out += ` ${this.props.className}`;\n            }\n            if (this.props.theme && typeof this.props.theme === 'string') {\n                elementNameOrMods = {\n                    ...elementNameOrMods,\n                    theme: this.props.theme\n                };\n            }\n        }\n\n        if (elementNameOrMods) {\n            return `${out}${createModifiersString(blockName, elementNameOrMods)}`;\n        }\n\n        return out;\n    };\n}\n\nfunction createModifiersString(blockName: string, elemOrMode: CnModifierMap) {\n    return Object.keys(elemOrMode)\n        .reduce((prev, curr) => {\n            const value = elemOrMode[curr];\n\n            if (typeof value === 'string' || typeof value === 'number') {\n                return `${prev} ${blockName}_${curr}_${value}`;\n            }\n            if (value) {\n                return `${prev} ${blockName}_${curr}`;\n            }\n            return prev;\n        }, '');\n}\n"]}