{"version":3,"sources":["create-theme-test.tsx"],"names":[],"mappings":"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","file":"create-theme-test.js","sourcesContent":["import React, { useLayoutEffect } from 'react';\nimport { mount } from 'enzyme';\nimport { createTheme } from './create-theme';\n\ntest('should return ThemeProvider and withTheme HOC', () => {\n    const { ThemeProvider, withTheme } = createTheme('any string');\n\n    expect(typeof withTheme).toBe('function');\n    expect(ThemeProvider).toBeDefined();\n});\n\ntest('should pass theme prop from Context to wrapped component', () => {\n    const { ThemeProvider, withTheme } = createTheme('theme');\n    const FakeComponent = jest.fn().mockReturnValue(null);\n    const TestComponent = withTheme(FakeComponent);\n\n    mount(\n        <ThemeProvider value='yellow'>\n            <TestComponent />\n        </ThemeProvider>\n    );\n\n    expect(FakeComponent).toHaveBeenCalledWith({ theme: 'yellow' }, expect.anything());\n});\n\ntest('should use theme provider theme when passed theme prop with undefined value', () => {\n    const { ThemeProvider, withTheme } = createTheme('theme');\n    const FakeComponent = jest.fn().mockReturnValue(null);\n    const TestComponent = withTheme(FakeComponent);\n\n    mount(\n        <ThemeProvider value='yellow'>\n            <TestComponent theme={undefined} />\n        </ThemeProvider>\n    );\n\n    expect(FakeComponent).toHaveBeenCalledWith({ theme: 'yellow' }, expect.anything());\n});\n\ntest('should allow to override theme when it was passed directly as props to component', () => {\n    const { ThemeProvider, withTheme } = createTheme('theme');\n    const FakeComponent = jest.fn().mockReturnValue(null);\n    const TestComponent = withTheme(FakeComponent);\n\n    mount(\n        <ThemeProvider value='yellow'>\n            <TestComponent theme='blue' />\n        </ThemeProvider>\n    );\n\n    expect(FakeComponent).toHaveBeenCalledWith({ theme: 'blue' }, expect.anything());\n});\n\ntest('should forward ref to wrapped component', () => {\n    class Component extends React.Component<{ theme?: string }> {\n        render() {\n          return <div {...this.props} />;\n        }\n    }\n\n    const { ThemeProvider, withTheme } = createTheme('theme');\n    const CompWithTheme = withTheme(Component);\n    const ref = React.createRef<Component>();\n\n    mount(\n        <ThemeProvider value='yellow'>\n            <CompWithTheme ref={ref} />\n        </ThemeProvider>\n    );\n\n    expect(ref.current).toBeInstanceOf(Component);\n});\n\ntest('should access to inner methods from ref in class component', () => {\n    type Props = { theme?: string }; \n    const { ThemeProvider, withTheme } = createTheme('theme');\n\n    class ClassComponent extends React.Component<Props> {\n        render() {\n            return <div />;\n        }\n\n        public doNothing = jest.fn()\n    }\n\n    const ThemedClassComponent = withTheme<Props, ClassComponent>(ClassComponent)\n    const classComponentRef = React.createRef<typeof ThemedClassComponent>();\n\n    mount(\n        <ThemeProvider value='yellow'>\n            <ThemedClassComponent ref={classComponentRef} />\n        </ThemeProvider>\n    );\n\n    classComponentRef.current?.doNothing();\n\n    expect(classComponentRef.current).toBeInstanceOf(ClassComponent);\n    expect(classComponentRef.current?.doNothing).toBeCalledTimes(1);\n});\n\ntest('should access to inner methods from ref in functional components', () => {\n    type Props = { theme?: string }; \n    const { ThemeProvider, withTheme } = createTheme('theme');\n\n    const FuncComponent: React.RefForwardingComponent<HTMLInputElement, Props> = (\n        React.forwardRef<HTMLInputElement, Props>((_, ref) => <input ref={ref}/>)\n    )\n\n    const ThemedFuncComponent = withTheme(FuncComponent)\n    \n    const OtherComponent: React.FC = () => {\n        const funcComponentRef = React.useRef<HTMLInputElement>(null);\n\n        useLayoutEffect(() => {\n            funcComponentRef.current?.focus();\n        }, [])\n\n        return (\n            <ThemedFuncComponent ref={funcComponentRef} />\n        )\n    }\n    \n    const wrapper = mount(\n        <ThemeProvider value='yellow'>\n            <OtherComponent />\n        </ThemeProvider>\n    );\n\n    expect(wrapper.find('input').is(':focus'));\n});\n"]}