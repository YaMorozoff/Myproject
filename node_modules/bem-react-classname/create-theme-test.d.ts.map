{"version":3,"sources":["create-theme-test.tsx"],"names":[],"mappings":"","file":"create-theme-test.d.ts","sourcesContent":["import React, { useLayoutEffect } from 'react';\nimport { mount } from 'enzyme';\nimport { createTheme } from './create-theme';\n\ntest('should return ThemeProvider and withTheme HOC', () => {\n    const { ThemeProvider, withTheme } = createTheme('any string');\n\n    expect(typeof withTheme).toBe('function');\n    expect(ThemeProvider).toBeDefined();\n});\n\ntest('should pass theme prop from Context to wrapped component', () => {\n    const { ThemeProvider, withTheme } = createTheme('theme');\n    const FakeComponent = jest.fn().mockReturnValue(null);\n    const TestComponent = withTheme(FakeComponent);\n\n    mount(\n        <ThemeProvider value='yellow'>\n            <TestComponent />\n        </ThemeProvider>\n    );\n\n    expect(FakeComponent).toHaveBeenCalledWith({ theme: 'yellow' }, expect.anything());\n});\n\ntest('should use theme provider theme when passed theme prop with undefined value', () => {\n    const { ThemeProvider, withTheme } = createTheme('theme');\n    const FakeComponent = jest.fn().mockReturnValue(null);\n    const TestComponent = withTheme(FakeComponent);\n\n    mount(\n        <ThemeProvider value='yellow'>\n            <TestComponent theme={undefined} />\n        </ThemeProvider>\n    );\n\n    expect(FakeComponent).toHaveBeenCalledWith({ theme: 'yellow' }, expect.anything());\n});\n\ntest('should allow to override theme when it was passed directly as props to component', () => {\n    const { ThemeProvider, withTheme } = createTheme('theme');\n    const FakeComponent = jest.fn().mockReturnValue(null);\n    const TestComponent = withTheme(FakeComponent);\n\n    mount(\n        <ThemeProvider value='yellow'>\n            <TestComponent theme='blue' />\n        </ThemeProvider>\n    );\n\n    expect(FakeComponent).toHaveBeenCalledWith({ theme: 'blue' }, expect.anything());\n});\n\ntest('should forward ref to wrapped component', () => {\n    class Component extends React.Component<{ theme?: string }> {\n        render() {\n          return <div {...this.props} />;\n        }\n    }\n\n    const { ThemeProvider, withTheme } = createTheme('theme');\n    const CompWithTheme = withTheme(Component);\n    const ref = React.createRef<Component>();\n\n    mount(\n        <ThemeProvider value='yellow'>\n            <CompWithTheme ref={ref} />\n        </ThemeProvider>\n    );\n\n    expect(ref.current).toBeInstanceOf(Component);\n});\n\ntest('should access to inner methods from ref in class component', () => {\n    type Props = { theme?: string }; \n    const { ThemeProvider, withTheme } = createTheme('theme');\n\n    class ClassComponent extends React.Component<Props> {\n        render() {\n            return <div />;\n        }\n\n        public doNothing = jest.fn()\n    }\n\n    const ThemedClassComponent = withTheme<Props, ClassComponent>(ClassComponent)\n    const classComponentRef = React.createRef<typeof ThemedClassComponent>();\n\n    mount(\n        <ThemeProvider value='yellow'>\n            <ThemedClassComponent ref={classComponentRef} />\n        </ThemeProvider>\n    );\n\n    classComponentRef.current?.doNothing();\n\n    expect(classComponentRef.current).toBeInstanceOf(ClassComponent);\n    expect(classComponentRef.current?.doNothing).toBeCalledTimes(1);\n});\n\ntest('should access to inner methods from ref in functional components', () => {\n    type Props = { theme?: string }; \n    const { ThemeProvider, withTheme } = createTheme('theme');\n\n    const FuncComponent: React.RefForwardingComponent<HTMLInputElement, Props> = (\n        React.forwardRef<HTMLInputElement, Props>((_, ref) => <input ref={ref}/>)\n    )\n\n    const ThemedFuncComponent = withTheme(FuncComponent)\n    \n    const OtherComponent: React.FC = () => {\n        const funcComponentRef = React.useRef<HTMLInputElement>(null);\n\n        useLayoutEffect(() => {\n            funcComponentRef.current?.focus();\n        }, [])\n\n        return (\n            <ThemedFuncComponent ref={funcComponentRef} />\n        )\n    }\n    \n    const wrapper = mount(\n        <ThemeProvider value='yellow'>\n            <OtherComponent />\n        </ThemeProvider>\n    );\n\n    expect(wrapper.find('input').is(':focus'));\n});\n"]}