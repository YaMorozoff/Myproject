{"version":3,"sources":["create-theme.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,wBAAgB,WAAW,CAAC,CAAC,EAAE,YAAY,EAAE,CAAC;;;;;EA+B7C","file":"create-theme.d.ts","sourcesContent":["import React from 'react';\n\nexport function createTheme<T>(defaultTheme: T) {\n    const ThemeContext = React.createContext<T>(defaultTheme);\n\n    function withTheme<P extends { theme?: T }, U extends React.ReactNode>(\n        Component: React.ComponentType<P>,\n    ) {\n        const ThemedComponent: React.RefForwardingComponent<U, P> = ({ ...props }, ref) => (\n            <ThemeContext.Consumer>\n                { (state) => {\n                    const propsWithTheme = {\n                        ...props,\n                        theme: props.theme || state || defaultTheme,\n                    };\n\n                    return (\n                        <Component { ...propsWithTheme } ref={ ref } />\n                    );\n                } }\n            </ThemeContext.Consumer>\n        );\n        \n        ThemedComponent.displayName =`ThemedComponent(${Component.displayName || Component.name})`;\n        const ForwardRef = React.forwardRef<U, P>(ThemedComponent);\n\n        return ForwardRef as typeof ForwardRef & U;\n    }\n\n    return {\n        ThemeProvider: ThemeContext.Provider,\n        withTheme,\n    };\n}\n"]}