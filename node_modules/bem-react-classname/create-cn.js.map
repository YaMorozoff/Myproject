{"version":3,"sources":["create-cn.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AAEA,SAAgB,QAAQ,CAAC,SAAiB,EAAE,SAAkB,EAAE,KAAc;IAC1E,OAAO,UAEH,iBAA0C,EAC1C,IAAoB;QAEpB,IAAI,OAAO,iBAAiB,KAAK,QAAQ,EAAE,EAAE,8BAA8B;YACvE,IAAM,KAAG,GAAM,SAAS,UAAK,iBAAmB,CAAC;YAEjD,IAAI,IAAI,EAAE;gBACN,OAAO,KAAG,KAAG,GAAG,qBAAqB,CAAC,KAAG,EAAE,IAAI,CAAG,CAAC;aACtD;YACD,OAAO,KAAG,CAAC;SACd;QAED,IAAI,GAAG,GAAG,SAAS,CAAC;QACpB,IAAI,KAAK,EAAE;YACP,iBAAiB,yBACV,iBAAiB,KACpB,KAAK,OAAA,GACR,CAAC;SACL;QACD,IAAI,OAAO,SAAS,KAAK,QAAQ,EAAE,EAAE,kDAAkD;YACnF,GAAG,IAAI,MAAI,SAAW,CAAC;SAC1B;aAAM,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,IAAI,CAAC,KAAK,EAAE,EAAE,gCAAgC;YACjF,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,SAAS,KAAK,QAAQ,EAAE;gBAClE,GAAG,IAAI,MAAI,IAAI,CAAC,KAAK,CAAC,SAAW,CAAC;aACrC;YACD,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,QAAQ,EAAE;gBAC1D,iBAAiB,yBACV,iBAAiB,KACpB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,GAC1B,CAAC;aACL;SACJ;QAED,IAAI,iBAAiB,EAAE;YACnB,OAAO,KAAG,GAAG,GAAG,qBAAqB,CAAC,SAAS,EAAE,iBAAiB,CAAG,CAAC;SACzE;QAED,OAAO,GAAG,CAAC;IACf,CAAC,CAAC;AACN,CAAC;AA1CD,4BA0CC;AAED,SAAS,qBAAqB,CAAC,SAAiB,EAAE,UAAyB;IACvE,OAAO,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;SACzB,MAAM,CAAC,UAAC,IAAI,EAAE,IAAI;QACf,IAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;QAE/B,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;YACxD,OAAU,IAAI,SAAI,SAAS,SAAI,IAAI,SAAI,KAAO,CAAC;SAClD;QACD,IAAI,KAAK,EAAE;YACP,OAAU,IAAI,SAAI,SAAS,SAAI,IAAM,CAAC;SACzC;QACD,OAAO,IAAI,CAAC;IAChB,CAAC,EAAE,EAAE,CAAC,CAAC;AACf,CAAC","file":"create-cn.js","sourcesContent":["type CnModifierMap = { [key: string]: boolean | string | number };\n\nexport function createCn(blockName: string, className?: string, theme?: string) {\n    return function (\n        this: { props?: Record<string, unknown> } | void,\n        elementNameOrMods?: string | CnModifierMap,\n        mods?: CnModifierMap\n    ) {\n        if (typeof elementNameOrMods === 'string') { // create an element className\n            const out = `${blockName}__${elementNameOrMods}`;\n\n            if (mods) {\n                return `${out}${createModifiersString(out, mods)}`;\n            }\n            return out;\n        }\n\n        let out = blockName;\n        if (theme) {\n            elementNameOrMods = {\n                ...elementNameOrMods,\n                theme\n            };\n        }\n        if (typeof className === 'string') { // external className provided as factory argument\n            out += ` ${className}`;\n        } else if (typeof this === 'object' && this.props) { // external className from props\n            if (this.props.className && typeof this.props.className === 'string') {\n                out += ` ${this.props.className}`;\n            }\n            if (this.props.theme && typeof this.props.theme === 'string') {\n                elementNameOrMods = {\n                    ...elementNameOrMods,\n                    theme: this.props.theme\n                };\n            }\n        }\n\n        if (elementNameOrMods) {\n            return `${out}${createModifiersString(blockName, elementNameOrMods)}`;\n        }\n\n        return out;\n    };\n}\n\nfunction createModifiersString(blockName: string, elemOrMode: CnModifierMap) {\n    return Object.keys(elemOrMode)\n        .reduce((prev, curr) => {\n            const value = elemOrMode[curr];\n\n            if (typeof value === 'string' || typeof value === 'number') {\n                return `${prev} ${blockName}_${curr}_${value}`;\n            }\n            if (value) {\n                return `${prev} ${blockName}_${curr}`;\n            }\n            return prev;\n        }, '');\n}\n"]}