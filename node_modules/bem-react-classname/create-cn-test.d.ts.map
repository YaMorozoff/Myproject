{"version":3,"sources":["create-cn-test.ts"],"names":[],"mappings":"","file":"create-cn-test.d.ts","sourcesContent":["import { createCn } from './create-cn';\n\ntest('should create function', () => {\n    const cn = createCn('block');\n\n    expect(typeof cn).toBe('function');\n});\n\ntest('created function should return block name', () => {\n    const cn = createCn('block');\n\n    expect(cn()).toBe('block');\n});\n\ntest('should add className from props of parent object', () => {\n    const pseudoComponent = {\n        props: { className: 'external' },\n        cn: createCn('block')\n    };\n\n    expect(pseudoComponent.cn()).toBe('block external');\n});\n\ntest('should not fail if props getter doesn\\'t has className props', () => {\n    const pseudoComponent = {\n        props: {},\n        cn: createCn('block')\n    };\n\n    expect(pseudoComponent.cn()).toBe('block');\n});\n\ntest('should add themed className when \"theme\" prop is present', () => {\n    const pseudoComponent = {\n        props: {\n            className: 'external',\n            theme: 'white'\n        },\n        cn: createCn('block')\n    };\n\n    expect(pseudoComponent.cn()).toBe('block external block_theme_white');\n});\n\ntest('should add className if it was passed as a string', () => {\n    const cn = createCn('block', 'external');\n\n    expect(cn()).toBe('block external');\n});\n\ntest('should add theme if it was passed as a string', () => {\n    const cn = createCn('block', undefined, 'white');\n\n    expect(cn()).toBe('block block_theme_white');\n});\n\ntest('should add theme and external className if it was passed as a string', () => {\n    const cn = createCn('block', 'external', 'white');\n\n    expect(cn()).toBe('block external block_theme_white');\n});\n\ntest('should add element to block name', () => {\n    const cn = createCn('block');\n\n    expect(cn('element')).toBe('block__element');\n});\n\ntest('should not add external className to element className', () => {\n    const cn = createCn('block', 'external');\n\n    expect(cn('element')).toBe('block__element');\n});\n\ntest('should not add external className to element className when created in component context', () => {\n    const pseudoComponent = {\n        props: { className: 'external' },\n        cn: createCn('block')\n    };\n\n    expect(pseudoComponent.cn('element')).toBe('block__element');\n});\n\ntest('should add boolean modifiers to block className', () => {\n    const cn = createCn('block');\n\n    expect(cn({ mod1: true, mod2: false })).toBe('block block_mod1');\n});\n\ntest('should add string modifier to block className', () => {\n    const cn = createCn('block');\n\n    expect(cn({ mod1: 'value' })).toBe('block block_mod1_value');\n});\n\ntest('should add modifier to element className', () => {\n    const cn = createCn('block');\n\n    const className = cn('element', { mod1: true, mod2: false, mod3: 'value', mod4: 4 });\n    expect(className).toBe('block__element block__element_mod1 block__element_mod3_value block__element_mod4_4');\n});\n"]}