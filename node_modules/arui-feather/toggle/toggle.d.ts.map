{"version":3,"sources":["toggle/toggle.tsx"],"names":[],"mappings":"AAIA,OAAO,KAAK,MAAM,OAAO,CAAC;AAI1B,oBAAY,WAAW,GAAG;IACtB;;OAEG;IACH,EAAE,CAAC,EAAE,MAAM,CAAC;IAEZ;;OAEG;IACH,IAAI,CAAC,EAAE,MAAM,CAAC;IAEd;;OAEG;IACH,KAAK,CAAC,EAAE,KAAK,CAAC,SAAS,CAAC;IAExB;;OAEG;IACH,UAAU,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC;IAE9B;;OAEG;IACH,IAAI,CAAC,EAAE,KAAK,CAAC,SAAS,CAAC;IAEvB;;OAEG;IACH,KAAK,CAAC,EAAE,MAAM,CAAC;IAEf;;OAEG;IACH,QAAQ,CAAC,EAAE,OAAO,CAAC;IAEnB;;OAEG;IACH,OAAO,CAAC,EAAE,OAAO,CAAC;IAElB;;OAEG;IACH,IAAI,CAAC,EAAE,GAAG,GAAG,GAAG,CAAC;IAEjB;;OAEG;IACH,KAAK,CAAC,EAAE,eAAe,GAAG,eAAe,CAAC;IAE1C;;OAEG;IACH,SAAS,CAAC,EAAE,MAAM,CAAC;IAEnB;;OAEG;IACH,QAAQ,CAAC,EAAE,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,EAAE,MAAM,KAAK,IAAI,CAAC;IAEzD;;OAEG;IACH,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC;IAElD;;OAEG;IACH,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,IAAI,CAAC;IAEjD;;OAEG;IACH,cAAc,CAAC,EAAE,MAAM,CAAC;CAC3B,CAAC;AAEF;;GAEG;AACH,qBAAa,MAAO,SAAQ,KAAK,CAAC,aAAa,CAAC,WAAW,CAAC;IACxD,SAAS,CAAC,EAAE;;;;;;iBAAsB;IAElC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,WAAW,CAAC,CAGvC;IAEF,KAAK;;;MAGH;IAEF,MAAM;IA8CN,MAAM,CAAC,WAAW,CAAC,KAAK,KAAA;IAIxB,OAAO,CAAC,YAAY,CAWlB;IAEF,OAAO,CAAC,WAAW,CAMjB;IAEF,OAAO,CAAC,aAAa,CAA+D;IAEpF,OAAO,CAAC,UAAU,CAMjB;CACJ;;AAED,wBAAsD","file":"toggle.d.ts","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport React from 'react';\nimport { createCn } from 'bem-react-classname';\nimport { withTheme } from '../cn';\n\nexport type ToggleProps = {\n    /**\n     * Идентификатор компонента в DOM\n     */\n    id?: string;\n\n    /**\n     * Имя компонента в DOM\n     */\n    name?: string;\n\n    /**\n     * Текст подписи к чекбоксу\n     */\n    label?: React.ReactNode;\n\n    /**\n     * Выравнивание подписи\n     */\n    labelAlign?: 'left' | 'right';\n\n    /**\n     * Подсказка под полем\n     */\n    hint?: React.ReactNode;\n\n    /**\n     * Значение чекбокса, которое будет отправлено на сервер, если он выбран\n     */\n    value?: string;\n\n    /**\n     * Управление возможностью взаимодействия с компонентом\n     */\n    disabled?: boolean;\n\n    /**\n     * Управление состоянием вкл/выкл компонента\n     */\n    checked?: boolean;\n\n    /**\n     * Размер компонента\n     */\n    size?: 's' | 'm';\n\n    /**\n     * Тема компонента\n     */\n    theme?: 'alfa-on-color' | 'alfa-on-white';\n\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Обработчик изменения значения 'checked' компонента, принимает на вход isChecked и value компонента\n     */\n    onChange?: (isChecked?: boolean, value?: string) => void;\n\n    /**\n     * Обработчик фокуса комнонента\n     */\n    onFocus?: (event?: React.FocusEvent<any>) => void;\n\n    /**\n     * Обработчик снятия фокуса компонента\n     */\n    onBlur?: (event?: React.FocusEvent<any>) => void;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    'data-test-id'?: string;\n};\n\n/**\n * Компонент переключателя.\n */\nexport class Toggle extends React.PureComponent<ToggleProps> {\n    protected cn = createCn('toggle');\n\n    static defaultProps: Partial<ToggleProps> = {\n        size: 'm',\n        labelAlign: 'right',\n    };\n\n    state = {\n        checked: false,\n        focused: false,\n    };\n\n    render() {\n        const checked = this.props.checked === undefined ? this.state.checked : this.props.checked;\n\n        return (\n            // eslint-disable-next-line jsx-a11y/no-noninteractive-element-interactions\n            <label\n                className={ this.cn({\n                    checked,\n                    focused: this.state.focused,\n                    disabled: this.props.disabled,\n                    size: this.props.size,\n                }) }\n                onFocus={ this.handleFocus }\n                onBlur={ this.handleBlur }\n                onMouseDown={ this.handleUnfocus }\n                onMouseUp={ this.handleUnfocus }\n                htmlFor={ this.props.id }\n                data-test-id={ this.props['data-test-id'] }\n            >\n                <span className={ this.cn('wrapper') }>\n                    <input\n                        className={ this.cn('control') }\n                        type=\"checkbox\"\n                        autoComplete=\"off\"\n                        id={ this.props.id }\n                        name={ this.props.name }\n                        value={ this.props.value }\n                        checked={ checked }\n                        disabled={ this.props.disabled }\n                        onClick={ Toggle.handleClick }\n                        onChange={ this.handleChange }\n                    />\n                    <span className={ this.cn('switch') } />\n                    { this.props.label && (\n                        <span className={ this.cn('label', { align: this.props.labelAlign }) }>\n                            { this.props.label }\n                        </span>\n                    ) }\n                </span>\n                { this.props.hint && (\n                    <span className={ this.cn('hint') }>{ this.props.hint }</span>\n                ) }\n            </label>\n        );\n    }\n\n    static handleClick(event) {\n        event.stopPropagation();\n    }\n\n    private handleChange = () => {\n        if (!this.props.disabled) {\n            // eslint-disable-next-line react/no-access-state-in-setstate\n            const nextCheckedValue = !(this.props.checked === undefined ? this.state.checked : this.props.checked);\n\n            this.setState({ checked: nextCheckedValue });\n\n            if (this.props.onChange) {\n                this.props.onChange(nextCheckedValue, this.props.value);\n            }\n        }\n    };\n\n    private handleFocus = (event) => {\n        this.setState({ focused: true });\n\n        if (this.props.onFocus) {\n            this.props.onFocus(event);\n        }\n    };\n\n    private handleUnfocus = () => setImmediate(() => this.setState({ focused: false }));\n\n    private handleBlur = (event) => {\n        this.setState({ focused: false });\n\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n    }\n}\n\nexport default withTheme<ToggleProps, Toggle>(Toggle);\n"]}