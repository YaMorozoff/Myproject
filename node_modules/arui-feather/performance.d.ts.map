{"version":3,"sources":["performance.ts"],"names":[],"mappings":"AAMA,UAAU,cAAc;IACpB,CAAC,SAAS,SAAS,QAAQ,EAAE,MAAM,EAAE,SAAS,GAAG,SAAS,GAAG,IAAI,CAAC;CACrE;AAID;;;;;;;GAOG;AACH,wBAAgB,OAAO,CAAC,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,UAAQ,GAAG,OAAO,CAsD/E;AA+BD;;;;;;;;;;;;;GAaG;AACH,MAAM,CAAC,OAAO,UAAU,WAAW,CAAC,OAAO,UAAQ,GAAG,cAAc,CASnE","file":"performance.d.ts","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { isValidElement } from 'react';\n\ninterface ClassDecorator {\n    <TFunction extends Function>(target: TFunction): TFunction | void;\n}\n\nconst { hasOwnProperty } = Object.prototype;\n\n/**\n * Функции проверки равенства двух переменных.\n *\n * @param {*} valueA Первое значение\n * @param {*} valueB Второе значение\n * @param {Boolean} [deep=false] Запускать ли глубокую проверку равенства\n * @returns {Boolean}\n */\nexport function isEqual(valueA: unknown, valueB: unknown, deep = false): boolean {\n    if (Object.is(valueA, valueB)) {\n        return true;\n    }\n\n    if (!isObject(valueA) || !isObject(valueB)) {\n        return false;\n    }\n\n    if (Object.getPrototypeOf(valueA) !== Object.getPrototypeOf(valueB)) {\n        return false;\n    }\n\n    const keysA = Object.keys(valueA);\n    const keysB = Object.keys(valueB);\n\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n\n    const bHasOwnProperty = hasOwnProperty.bind(valueB);\n\n    while (keysA.length > 0) {\n        const key = keysA.pop();\n\n        if (!bHasOwnProperty(key)) {\n            return false;\n        }\n\n        const a = valueA[key];\n        const b = valueB[key];\n\n        if (!Object.is(a, b)) {\n            if (!deep || !isObject(a) || !isObject(b)) {\n                return false;\n            }\n\n            // https://github.com/erikras/redux-form/issues/3461\n            // https://github.com/erikras/redux-form/pull/3481\n            if (isValidElement(a) || isValidElement(b)) {\n                return false;\n            }\n\n            if (!isEqual(a, b, deep)) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n\n    function isObject(value: unknown): value is {} {\n        return typeof value === 'object' && value !== null;\n    }\n}\n\n/**\n * Поверхностная проверка равенства props и state компонента.\n *\n * @param {*} nextProps next component props\n * @param {*} nextState next component state\n * @param {*} nextContext next component context\n * @returns {Boolean}\n */\nfunction shallow<P, S>(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: unknown): boolean {\n    return !isEqual(this.props, nextProps)\n        || !isEqual(this.state, nextState)\n        || !isEqual(this.context, nextContext);\n}\n\n/**\n * Запускает глубокую проверку равенства props и state компонента.\n * Глубокая проверка менее производительна, но позволяет проверять равенство массивов и объектов.\n *\n * @param {*} nextProps next component props\n * @param {*} nextState next component state\n * @param {*} nextContext next component context\n * @returns {Boolean}\n */\nfunction deep<P, S>(nextProps: Readonly<P>, nextState: Readonly<S>, nextContext: unknown): boolean {\n    return !isEqual(this.props, nextProps, true)\n        || !isEqual(this.state, nextState, true)\n        || !isEqual(this.context, nextContext, true);\n}\n\n/**\n * Декоратор для улучшения производительности React компонентов. Работает за счет реализации метода\n * [shouldComponentUpdate](https://facebook.github.io/react/docs/advanced-performance.html#avoiding-reconciling-the-dom)\n *\n * У декоратора есть два режима работы - глубокая и \"поверхностная\" проверка. В случае, если все props и state\n * компонента состоит только из примитивных значений (`number`, `string`, `null`, `undefined`) стоит использовать\n * поверхностную проверку, которая будет проверять простое равенство значений в `props` и `state`.\n\n * В случае, если props или state компонентов имеют сложную структуру (массивы, объекты) необходимо использовать\n * глубокую проверку.\n *\n * @param useDeep Использовать глубокую проверку равенства\n * @deprecated since version 17.0.0\n */\nexport default function performance(useDeep = false): ClassDecorator {\n    if (!useDeep) {\n        console.warn('arui-feather/performance is deprecated.');\n    }\n\n    return function (target) {\n        // eslint-disable-next-line no-param-reassign\n        target.prototype.shouldComponentUpdate = useDeep ? deep : shallow;\n    };\n}\n"]}