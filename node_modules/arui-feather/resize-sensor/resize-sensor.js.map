{"version":3,"sources":["resize-sensor/resize-sensor.tsx"],"names":[],"mappings":";AAAA;;8DAE8D;;;;;;;;;;;;;;;;;;AAE9D,gDAA0B;AAS1B;;;;;;;GAOG;AACH;IAAkC,gCAAkC;IAApE;QAAA,qEA6CC;QALW,kBAAY,GAAG;YACnB,IAAI,KAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACrB,KAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;aACzB;QACL,CAAC,CAAA;;IACL,CAAC;IA1CG,wCAAiB,GAAjB;QACI,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE;YAC3B,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;SAC3E;IACL,CAAC;IAED,2CAAoB,GAApB;QACI,IAAI,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE;YAC3B,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;SAC9E;IACL,CAAC;IAED,6BAAM,GAAN;QAAA,iBAuBC;QAtBG,IAAM,WAAW,GAAG;YAChB,QAAQ,EAAE,UAAmB;YAC7B,GAAG,EAAE,CAAC;YACN,IAAI,EAAE,CAAC;YACP,KAAK,EAAE,MAAM;YACb,MAAM,EAAE,MAAM;YACd,UAAU,EAAE,aAAa;YACzB,MAAM,EAAE,MAAM;YACd,MAAM,EAAE,CAAC,CAAC;SACb,CAAC;QAEF,8CAA8C;QAC9C,OAAO,CACH,0CACI,GAAG,EAAG,UAAC,MAAM;gBACT,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACzB,CAAC,EACD,KAAK,EAAG,WAAW,EACnB,QAAQ,EAAG,CAAC,CAAC,GACf,CACL,CAAC;QACF,6CAA6C;IACjD,CAAC;IAOL,mBAAC;AAAD,CA7CA,AA6CC,CA7CiC,eAAK,CAAC,SAAS,GA6ChD;AA7CY,oCAAY;AA+CzB,kBAAe,YAAY,CAAC","file":"resize-sensor.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport React from 'react';\n\nexport type ResizeSensorProps = {\n    /**\n     * Callback на изменение размера родителя\n     */\n    onResize?: () => void;\n};\n\n/**\n * Компонент позволяющий слушать изменения размера родительского элемента.\n * Для использования разместите его в элементе об изменении размера, которого\n * вы хотите знать и добавьте внешний обработчик `onResize`.\n *\n * Важно! Элемент, размер которого вы хотите измерять, должен обладать\n * css свойством `position: relative;`.\n */\nexport class ResizeSensor extends React.Component<ResizeSensorProps> {\n    private iframe: HTMLIFrameElement;\n\n    componentDidMount() {\n        if (this.iframe.contentWindow) {\n            this.iframe.contentWindow.addEventListener('resize', this.handleResize);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.iframe.contentWindow) {\n            this.iframe.contentWindow.removeEventListener('resize', this.handleResize);\n        }\n    }\n\n    render() {\n        const iframeStyle = {\n            position: 'absolute' as const,\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%',\n            background: 'transparent',\n            border: 'none',\n            zIndex: -1,\n        };\n\n        /* eslint-disable jsx-a11y/iframe-has-title */\n        return (\n            <iframe\n                ref={ (iframe) => {\n                    this.iframe = iframe;\n                } }\n                style={ iframeStyle }\n                tabIndex={ -1 }\n            />\n        );\n        /* eslint-enable jsx-a11y/iframe-has-title */\n    }\n\n    private handleResize = () => {\n        if (this.props.onResize) {\n            this.props.onResize();\n        }\n    }\n}\n\nexport default ResizeSensor;\n"]}