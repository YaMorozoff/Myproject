"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
/**
 * Компонент позволяющий слушать изменения размера родительского элемента.
 * Для использования разместите его в элементе об изменении размера, которого
 * вы хотите знать и добавьте внешний обработчик `onResize`.
 *
 * Важно! Элемент, размер которого вы хотите измерять, должен обладать
 * css свойством `position: relative;`.
 */
var ResizeSensor = /** @class */ (function (_super) {
    __extends(ResizeSensor, _super);
    function ResizeSensor() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleResize = function () {
            if (_this.props.onResize) {
                _this.props.onResize();
            }
        };
        return _this;
    }
    ResizeSensor.prototype.componentDidMount = function () {
        if (this.iframe.contentWindow) {
            this.iframe.contentWindow.addEventListener('resize', this.handleResize);
        }
    };
    ResizeSensor.prototype.componentWillUnmount = function () {
        if (this.iframe.contentWindow) {
            this.iframe.contentWindow.removeEventListener('resize', this.handleResize);
        }
    };
    ResizeSensor.prototype.render = function () {
        var _this = this;
        var iframeStyle = {
            position: 'absolute',
            top: 0,
            left: 0,
            width: '100%',
            height: '100%',
            background: 'transparent',
            border: 'none',
            zIndex: -1,
        };
        /* eslint-disable jsx-a11y/iframe-has-title */
        return (react_1.default.createElement("iframe", { ref: function (iframe) {
                _this.iframe = iframe;
            }, style: iframeStyle, tabIndex: -1 }));
        /* eslint-enable jsx-a11y/iframe-has-title */
    };
    return ResizeSensor;
}(react_1.default.Component));
exports.ResizeSensor = ResizeSensor;
exports.default = ResizeSensor;

//# sourceMappingURL=resize-sensor.js.map
