{"version":3,"sources":["cn.ts"],"names":[],"mappings":";AAAA;;8DAE8D;;;;;;AAE9D,2DAAkD;AAClD,8DAA8B;AAa9B;;GAEG;AACH,IAAM,WAAW,GAA2C,sBAAU,CAAC,MAAM,CAAC,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC,CAAC;AAElH;;GAEG;AACH,kBAAe,WAAW,CAAC;AAIZ,QAAA,SAAS,IAAX,KAA+B,iCAAW,CAAY,eAAe,CAAC,iBAAzD,QAAA,aAAa,oBAA6C","file":"cn.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport { createTheme } from 'bem-react-classname';\nimport cn from 'cn-decorator';\n\ntype CnModifierMap = { [key: string]: boolean | string };\n\nexport interface CnFn {\n    (map?: CnModifierMap): string;\n    (elem: string, map?: CnModifierMap): string;\n}\n\ninterface ClassDecorator {\n    <TFunction extends Function>(target: TFunction): TFunction | void;\n}\n\n/**\n * @deprecated\n */\nconst cnDecorator: (blockName: string) => ClassDecorator = (cn as any).create(['alfa-on-white', 'alfa-on-color']);\n\n/**\n * @deprecated\n */\nexport default cnDecorator;\n\nexport type ThemeType = 'alfa-on-color' | 'alfa-on-white';\n\nexport const { withTheme, ThemeProvider } = createTheme<ThemeType>('alfa-on-white');\n"]}