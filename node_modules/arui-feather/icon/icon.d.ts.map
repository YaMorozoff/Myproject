{"version":3,"sources":["icon/icon.tsx"],"names":[],"mappings":"AAIA,OAAO,KAAK,MAAM,OAAO,CAAC;AAI1B,oBAAY,SAAS,GAAG;IAEpB;;OAEG;IACH,SAAS,CAAC,EAAE,MAAM,CAAC;IAEnB;;OAEG;IACH,OAAO,CAAC,EAAE,OAAO,CAAC;IAElB;;OAEG;IACH,EAAE,CAAC,EAAE,MAAM,CAAC;IAEZ;;OAEG;IACH,IAAI,CAAC,EAAE,MAAM,CAAC;IAEd;;OAEG;IACH,IAAI,CAAC,EAAE,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,KAAK,GAAG,MAAM,CAAC;IAEtD;;OAEG;IACH,KAAK,CAAC,EAAE,eAAe,GAAG,eAAe,CAAC;IAE1C;;OAEG;IACH,cAAc,CAAC,EAAE,MAAM,CAAC;CAE3B,CAAC;AAEF;;GAEG;AACH,qBAAa,IAAK,SAAQ,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC;IACpD,SAAS,CAAC,EAAE;;;;;;iBAAoB;IAEhC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,SAAS,CAAC,CAErC;IAEF,MAAM;CAuBT;;AAED,wBAAgD","file":"icon.d.ts","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport React from 'react';\nimport { createCn } from 'bem-react-classname';\nimport { withTheme } from '../cn';\n\nexport type IconProps = {\n\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Управление цветностью иконки\n     */\n    colored?: boolean;\n\n    /**\n     * Идентификатор компонента в DOM\n     */\n    id?: string;\n\n    /**\n     * Название иконки\n     */\n    name?: string;\n\n    /**\n     * Размер иконки\n     */\n    size?: 'xs' | 's' | 'm' | 'l' | 'xl' | 'xxl' | 'xxxl';\n\n    /**\n     * Тема компонента\n     */\n    theme?: 'alfa-on-color' | 'alfa-on-white';\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    'data-test-id'?: string;\n\n};\n\n/**\n * Базовый компонент иконки. Содержит в себе только необходимые для компонентов иконки.\n */\nexport class Icon extends React.PureComponent<IconProps> {\n    protected cn = createCn('icon');\n\n    static defaultProps: Partial<IconProps> = {\n        size: 'm',\n    };\n\n    render() {\n        const mods: {\n            size;\n            name?;\n            colored?;\n        } = { size: this.props.size };\n\n        if (this.props.name) {\n            mods.name = this.props.name;\n        }\n\n        if (this.props.colored) {\n            mods.colored = true;\n        }\n\n        return (\n            <span\n                className={ this.cn(mods) }\n                id={ this.props.id }\n                data-test-id={ this.props['data-test-id'] }\n            />\n        );\n    }\n}\n\nexport default withTheme<IconProps, Icon>(Icon);\n"]}