{"version":3,"sources":["icon/icon.tsx"],"names":[],"mappings":";AAAA;;8DAE8D;;;;;;;;;;;;;;;;;;AAE9D,gDAA0B;AAC1B,2DAA+C;AAC/C,4BAAkC;AAyClC;;GAEG;AACH;IAA0B,wBAA8B;IAAxD;QAAA,qEA8BC;QA7Ba,QAAE,GAAG,8BAAQ,CAAC,MAAM,CAAC,CAAC;;IA6BpC,CAAC;IAvBG,qBAAM,GAAN;QACI,IAAM,IAAI,GAIN,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAE9B,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;YACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;SAC/B;QAED,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YACpB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;SACvB;QAED,OAAO,CACH,wCACI,SAAS,EAAG,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EACzB,EAAE,EAAG,IAAI,CAAC,KAAK,CAAC,EAAE,kBACH,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,GAC3C,CACL,CAAC;IACN,CAAC;IA1BM,iBAAY,GAAuB;QACtC,IAAI,EAAE,GAAG;KACZ,CAAC;IAyBN,WAAC;CA9BD,AA8BC,CA9ByB,eAAK,CAAC,aAAa,GA8B5C;AA9BY,oBAAI;AAgCjB,kBAAe,cAAS,CAAkB,IAAI,CAAC,CAAC","file":"icon.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport React from 'react';\nimport { createCn } from 'bem-react-classname';\nimport { withTheme } from '../cn';\n\nexport type IconProps = {\n\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Управление цветностью иконки\n     */\n    colored?: boolean;\n\n    /**\n     * Идентификатор компонента в DOM\n     */\n    id?: string;\n\n    /**\n     * Название иконки\n     */\n    name?: string;\n\n    /**\n     * Размер иконки\n     */\n    size?: 'xs' | 's' | 'm' | 'l' | 'xl' | 'xxl' | 'xxxl';\n\n    /**\n     * Тема компонента\n     */\n    theme?: 'alfa-on-color' | 'alfa-on-white';\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    'data-test-id'?: string;\n\n};\n\n/**\n * Базовый компонент иконки. Содержит в себе только необходимые для компонентов иконки.\n */\nexport class Icon extends React.PureComponent<IconProps> {\n    protected cn = createCn('icon');\n\n    static defaultProps: Partial<IconProps> = {\n        size: 'm',\n    };\n\n    render() {\n        const mods: {\n            size;\n            name?;\n            colored?;\n        } = { size: this.props.size };\n\n        if (this.props.name) {\n            mods.name = this.props.name;\n        }\n\n        if (this.props.colored) {\n            mods.colored = true;\n        }\n\n        return (\n            <span\n                className={ this.cn(mods) }\n                id={ this.props.id }\n                data-test-id={ this.props['data-test-id'] }\n            />\n        );\n    }\n}\n\nexport default withTheme<IconProps, Icon>(Icon);\n"]}