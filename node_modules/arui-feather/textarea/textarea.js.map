{"version":3,"sources":["textarea/textarea.tsx"],"names":[],"mappings":"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","file":"textarea.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport React from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { createCn } from 'bem-react-classname';\nimport { withTheme } from '../cn';\n\nimport scrollTo from '../lib/scroll-to';\nimport { SCROLL_TO_CORRECTION } from '../vars';\n\nexport type TextareaProps = {\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Тип поля (filled только на белом фоне в размере m)\n     */\n    view?: 'default' | 'filled';\n\n    /**\n     * Управление возможностью компонента занимать всю ширину родителя\n     */\n    width?: 'default' | 'available';\n\n    /**\n     * Управление автозаполнением компонента\n     */\n    autocomplete?: boolean;\n\n    /**\n     * Управление возможностью изменения значения компонента\n     */\n    disabled?: boolean;\n\n    /**\n     * Управление возможностью подстраивать высоту компонента под высоту текста\n     */\n    autosize?: boolean;\n\n    /**\n     * Максимальное количество отображаемых строк (работает только вместе с autosize)\n     */\n    maxRows?: number;\n\n    /**\n     * Минимальное количество отображаемых строк (работает только вместе c autosize)\n     */\n    minRows?: number;\n\n    /**\n     * Максимальная высота элемента (работает только вместе с autosize)\n     */\n    maxHeight?: number;\n\n    /**\n     * Максимальное число символов\n     */\n    maxLength?: number;\n\n    /**\n     * Уникальный идентификатор блока\n     */\n    id?: string;\n\n    /**\n     * Уникальное имя блока\n     */\n    name?: string;\n\n    /**\n     * Содержимое поля ввода, указанное по умолчанию (используйте это поле\n     * если хотите использовать компонент как uncontrolled)\n     */\n    defaultValue?: string;\n\n    /**\n     * Содержимое поля ввода\n     */\n    value?: string;\n\n    /**\n     * Последовательность перехода между контролами при нажатии на Tab\n     */\n    tabIndex?: number;\n\n    /**\n     * Лейбл для поля\n     */\n    label?: React.ReactNode;\n\n    /**\n     * Подсказка в поле\n     */\n    placeholder?: string;\n\n    /**\n     * Подсказка под полем\n     */\n    hint?: React.ReactNode;\n\n    /**\n     * Отображение ошибки\n     */\n    error?: React.ReactNode;\n\n    /**\n     * Иконка справа\n     */\n    icon?: React.ReactNode;\n\n    /**\n     * Размер компонента\n     */\n    size?: 's' | 'm' | 'l' | 'xl';\n\n    /**\n     * Управление возможностью изменения размеров компонента\n     */\n    resize?: 'both' | 'horizontal' | 'vertical' | 'none';\n\n    /**\n     * Тема компонента\n     */\n    theme?: 'alfa-on-color' | 'alfa-on-white';\n\n    /**\n     * Обработчик изменения значения 'value'\n     */\n    onChange?: (value?: string) => void;\n\n    /**\n     * Обработчик фокуса поля\n     */\n    onFocus?: (event?: React.FocusEvent<any>) => void;\n\n    /**\n     * Обработчик снятия фокуса c поля\n     */\n    onBlur?: (event?: React.FocusEvent<any>) => void;\n\n    /**\n     * Обработчик события вставки текста в поле\n     */\n    onPaste?: (event?: React.ClipboardEvent<any>) => void;\n\n    /**\n     * Обработчик события изменения высоты компонента со значением параметра \"autosize\" = true\n     */\n    onHeightChange?: (height?: number) => void;\n\n    /**\n     * Обработчик события нажатия клавиши при фокусе на поле\n     */\n    onKeyPress?: (event?: React.KeyboardEvent<any>) => void;\n\n    /**\n     * Обработчик события keyDown\n     */\n    onKeyDown?: (event?: React.KeyboardEvent<any>) => void;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    'data-test-id'?: string;\n};\n\n/**\n * Компонент многострочного текстового ввода.\n */\nexport class Textarea extends React.PureComponent<TextareaProps> {\n    protected cn = createCn('textarea');\n\n    static defaultProps: Partial<TextareaProps> = {\n        view: 'default',\n        width: 'default',\n        autocomplete: true,\n        disabled: false,\n        autosize: true,\n        resize: 'none',\n        size: 'm',\n    };\n\n    state = {\n        focused: false,\n        value: this.props.defaultValue || '',\n    };\n\n    /**\n     * @type {HtmlSpanElement}\n     */\n    private root;\n\n    /**\n     * @type {HTMLTextareaElement}\n     */\n    control;\n\n    render() {\n        const value = this.props.value === undefined ? this.state.value : this.props.value;\n\n        const textareaProps = {\n            className: this.cn('control'),\n            [this.props.autosize ? 'inputRef' : 'ref']: (control) => {\n                this.control = control;\n            },\n            autoComplete: this.props.autocomplete === false ? 'off' : 'on',\n            disabled: this.props.disabled,\n            id: this.props.id,\n            name: this.props.name,\n            value,\n            tabIndex: this.props.tabIndex,\n            placeholder: this.props.placeholder,\n            maxLength: this.props.maxLength,\n            onChange: this.handleChange,\n            onFocus: this.handleFocus,\n            onBlur: this.handleBlur,\n            onPaste: this.handlePaste,\n            onKeyPress: this.handleKeyPress,\n            onKeyDown: this.handleKeyDown,\n        };\n\n        return (\n            <span\n                className={ this.cn({\n                    disabled: this.props.disabled,\n                    focused: this.state.focused,\n                    autosize: this.props.autosize,\n                    size: this.props.size,\n                    view: this.props.view,\n                    width: this.props.width,\n                    resize: this.props.resize,\n                    invalid: !!this.props.error,\n                    'has-label': !!this.props.label,\n                    'has-value': !!value,\n                    'has-icon': !!this.props.icon\n                }) }\n                ref={ (root) => {\n                    this.root = root;\n                } }\n                data-test-id={ this.props['data-test-id'] }\n            >\n                <span className={ this.cn('inner') }>\n                    {\n                        !!this.props.label\n                        && (\n                            <span className={ this.cn('top') }>\n                                { this.props.label }\n                            </span>\n                        )\n                    }\n                    {\n                        this.props.autosize\n                            ? (\n                                <TextareaAutosize\n                                    { ...textareaProps }\n                                    maxRows={ this.props.maxRows }\n                                    minRows={ this.props.minRows }\n                                    style={ { maxHeight: this.props.maxHeight } }\n                                    onHeightChange={ this.handleHeightChange }\n                                />\n                            )\n                            : <textarea { ...textareaProps } />\n                    }\n                    {\n                        this.props.icon\n                        && (\n                            <span className={ this.cn('icon') }>\n                                { this.props.icon }\n                            </span>\n                        )\n                    }\n                    {\n                        (this.props.error || this.props.hint)\n                        && (\n                            <span className={ this.cn('sub') }>\n                                { this.props.error || this.props.hint }\n                            </span>\n                        )\n                    }\n                </span>\n            </span>\n        );\n    }\n\n    private handleFocus = () => {\n        this.setState({ focused: true });\n\n        if (this.props.onFocus) {\n            this.props.onFocus();\n        }\n    };\n\n    private handleBlur = (event) => {\n        this.setState({ focused: false });\n\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n    };\n\n    private handleChange = (event) => {\n        const { value } = event.target;\n\n        if (this.props.value === undefined) {\n            this.setState({ value });\n        }\n\n        if (this.props.onChange) {\n            this.props.onChange(value);\n        }\n    };\n\n    private handlePaste = (event) => {\n        if (this.props.onPaste) {\n            this.props.onPaste(event);\n        }\n    };\n\n    private handleHeightChange = (height) => {\n        if (this.props.onHeightChange) {\n            this.props.onHeightChange(height);\n        }\n    };\n\n    private handleKeyPress = (event) => {\n        if (this.props.onKeyPress) {\n            this.props.onKeyPress(event);\n        }\n    };\n\n    private handleKeyDown = (event) => {\n        if (this.props.onKeyDown) {\n            this.props.onKeyDown(event);\n        }\n    };\n\n    /**\n     * Устанавливает фокус на поле ввода.\n     */\n    public focus() {\n        this.control.focus();\n    }\n\n    /**\n     * Снимает фокус с поля ввода.\n     */\n    // eslint-disable-next-line class-methods-use-this\n    public blur() {\n        if (document.activeElement) {\n            (document.activeElement as HTMLElement).blur();\n        }\n    }\n\n    /**\n     * Скроллит страницу до поля ввода.\n     */\n    public scrollTo() {\n        const elementRect = this.root.getBoundingClientRect();\n\n        scrollTo({\n            targetY: (elementRect.top + window.pageYOffset) - SCROLL_TO_CORRECTION,\n        });\n    }\n}\n\nexport default withTheme<TextareaProps, Textarea>(Textarea);\n"]}