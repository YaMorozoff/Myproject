{"version":3,"sources":["textarea/textarea.tsx"],"names":[],"mappings":"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","file":"textarea.d.ts","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport React from 'react';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport { createCn } from 'bem-react-classname';\nimport { withTheme } from '../cn';\n\nimport scrollTo from '../lib/scroll-to';\nimport { SCROLL_TO_CORRECTION } from '../vars';\n\nexport type TextareaProps = {\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Тип поля (filled только на белом фоне в размере m)\n     */\n    view?: 'default' | 'filled';\n\n    /**\n     * Управление возможностью компонента занимать всю ширину родителя\n     */\n    width?: 'default' | 'available';\n\n    /**\n     * Управление автозаполнением компонента\n     */\n    autocomplete?: boolean;\n\n    /**\n     * Управление возможностью изменения значения компонента\n     */\n    disabled?: boolean;\n\n    /**\n     * Управление возможностью подстраивать высоту компонента под высоту текста\n     */\n    autosize?: boolean;\n\n    /**\n     * Максимальное количество отображаемых строк (работает только вместе с autosize)\n     */\n    maxRows?: number;\n\n    /**\n     * Минимальное количество отображаемых строк (работает только вместе c autosize)\n     */\n    minRows?: number;\n\n    /**\n     * Максимальная высота элемента (работает только вместе с autosize)\n     */\n    maxHeight?: number;\n\n    /**\n     * Максимальное число символов\n     */\n    maxLength?: number;\n\n    /**\n     * Уникальный идентификатор блока\n     */\n    id?: string;\n\n    /**\n     * Уникальное имя блока\n     */\n    name?: string;\n\n    /**\n     * Содержимое поля ввода, указанное по умолчанию (используйте это поле\n     * если хотите использовать компонент как uncontrolled)\n     */\n    defaultValue?: string;\n\n    /**\n     * Содержимое поля ввода\n     */\n    value?: string;\n\n    /**\n     * Последовательность перехода между контролами при нажатии на Tab\n     */\n    tabIndex?: number;\n\n    /**\n     * Лейбл для поля\n     */\n    label?: React.ReactNode;\n\n    /**\n     * Подсказка в поле\n     */\n    placeholder?: string;\n\n    /**\n     * Подсказка под полем\n     */\n    hint?: React.ReactNode;\n\n    /**\n     * Отображение ошибки\n     */\n    error?: React.ReactNode;\n\n    /**\n     * Иконка справа\n     */\n    icon?: React.ReactNode;\n\n    /**\n     * Размер компонента\n     */\n    size?: 's' | 'm' | 'l' | 'xl';\n\n    /**\n     * Управление возможностью изменения размеров компонента\n     */\n    resize?: 'both' | 'horizontal' | 'vertical' | 'none';\n\n    /**\n     * Тема компонента\n     */\n    theme?: 'alfa-on-color' | 'alfa-on-white';\n\n    /**\n     * Обработчик изменения значения 'value'\n     */\n    onChange?: (value?: string) => void;\n\n    /**\n     * Обработчик фокуса поля\n     */\n    onFocus?: (event?: React.FocusEvent<any>) => void;\n\n    /**\n     * Обработчик снятия фокуса c поля\n     */\n    onBlur?: (event?: React.FocusEvent<any>) => void;\n\n    /**\n     * Обработчик события вставки текста в поле\n     */\n    onPaste?: (event?: React.ClipboardEvent<any>) => void;\n\n    /**\n     * Обработчик события изменения высоты компонента со значением параметра \"autosize\" = true\n     */\n    onHeightChange?: (height?: number) => void;\n\n    /**\n     * Обработчик события нажатия клавиши при фокусе на поле\n     */\n    onKeyPress?: (event?: React.KeyboardEvent<any>) => void;\n\n    /**\n     * Обработчик события keyDown\n     */\n    onKeyDown?: (event?: React.KeyboardEvent<any>) => void;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    'data-test-id'?: string;\n};\n\n/**\n * Компонент многострочного текстового ввода.\n */\nexport class Textarea extends React.PureComponent<TextareaProps> {\n    protected cn = createCn('textarea');\n\n    static defaultProps: Partial<TextareaProps> = {\n        view: 'default',\n        width: 'default',\n        autocomplete: true,\n        disabled: false,\n        autosize: true,\n        resize: 'none',\n        size: 'm',\n    };\n\n    state = {\n        focused: false,\n        value: this.props.defaultValue || '',\n    };\n\n    /**\n     * @type {HtmlSpanElement}\n     */\n    private root;\n\n    /**\n     * @type {HTMLTextareaElement}\n     */\n    control;\n\n    render() {\n        const value = this.props.value === undefined ? this.state.value : this.props.value;\n\n        const textareaProps = {\n            className: this.cn('control'),\n            [this.props.autosize ? 'inputRef' : 'ref']: (control) => {\n                this.control = control;\n            },\n            autoComplete: this.props.autocomplete === false ? 'off' : 'on',\n            disabled: this.props.disabled,\n            id: this.props.id,\n            name: this.props.name,\n            value,\n            tabIndex: this.props.tabIndex,\n            placeholder: this.props.placeholder,\n            maxLength: this.props.maxLength,\n            onChange: this.handleChange,\n            onFocus: this.handleFocus,\n            onBlur: this.handleBlur,\n            onPaste: this.handlePaste,\n            onKeyPress: this.handleKeyPress,\n            onKeyDown: this.handleKeyDown,\n        };\n\n        return (\n            <span\n                className={ this.cn({\n                    disabled: this.props.disabled,\n                    focused: this.state.focused,\n                    autosize: this.props.autosize,\n                    size: this.props.size,\n                    view: this.props.view,\n                    width: this.props.width,\n                    resize: this.props.resize,\n                    invalid: !!this.props.error,\n                    'has-label': !!this.props.label,\n                    'has-value': !!value,\n                    'has-icon': !!this.props.icon\n                }) }\n                ref={ (root) => {\n                    this.root = root;\n                } }\n                data-test-id={ this.props['data-test-id'] }\n            >\n                <span className={ this.cn('inner') }>\n                    {\n                        !!this.props.label\n                        && (\n                            <span className={ this.cn('top') }>\n                                { this.props.label }\n                            </span>\n                        )\n                    }\n                    {\n                        this.props.autosize\n                            ? (\n                                <TextareaAutosize\n                                    { ...textareaProps }\n                                    maxRows={ this.props.maxRows }\n                                    minRows={ this.props.minRows }\n                                    style={ { maxHeight: this.props.maxHeight } }\n                                    onHeightChange={ this.handleHeightChange }\n                                />\n                            )\n                            : <textarea { ...textareaProps } />\n                    }\n                    {\n                        this.props.icon\n                        && (\n                            <span className={ this.cn('icon') }>\n                                { this.props.icon }\n                            </span>\n                        )\n                    }\n                    {\n                        (this.props.error || this.props.hint)\n                        && (\n                            <span className={ this.cn('sub') }>\n                                { this.props.error || this.props.hint }\n                            </span>\n                        )\n                    }\n                </span>\n            </span>\n        );\n    }\n\n    private handleFocus = () => {\n        this.setState({ focused: true });\n\n        if (this.props.onFocus) {\n            this.props.onFocus();\n        }\n    };\n\n    private handleBlur = (event) => {\n        this.setState({ focused: false });\n\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n    };\n\n    private handleChange = (event) => {\n        const { value } = event.target;\n\n        if (this.props.value === undefined) {\n            this.setState({ value });\n        }\n\n        if (this.props.onChange) {\n            this.props.onChange(value);\n        }\n    };\n\n    private handlePaste = (event) => {\n        if (this.props.onPaste) {\n            this.props.onPaste(event);\n        }\n    };\n\n    private handleHeightChange = (height) => {\n        if (this.props.onHeightChange) {\n            this.props.onHeightChange(height);\n        }\n    };\n\n    private handleKeyPress = (event) => {\n        if (this.props.onKeyPress) {\n            this.props.onKeyPress(event);\n        }\n    };\n\n    private handleKeyDown = (event) => {\n        if (this.props.onKeyDown) {\n            this.props.onKeyDown(event);\n        }\n    };\n\n    /**\n     * Устанавливает фокус на поле ввода.\n     */\n    public focus() {\n        this.control.focus();\n    }\n\n    /**\n     * Снимает фокус с поля ввода.\n     */\n    // eslint-disable-next-line class-methods-use-this\n    public blur() {\n        if (document.activeElement) {\n            (document.activeElement as HTMLElement).blur();\n        }\n    }\n\n    /**\n     * Скроллит страницу до поля ввода.\n     */\n    public scrollTo() {\n        const elementRect = this.root.getBoundingClientRect();\n\n        scrollTo({\n            targetY: (elementRect.top + window.pageYOffset) - SCROLL_TO_CORRECTION,\n        });\n    }\n}\n\nexport default withTheme<TextareaProps, Textarea>(Textarea);\n"]}