{"version":3,"sources":["lib/prop-types.ts"],"names":[],"mappings":"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","file":"prop-types.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/**\n * Функции объявленные в этом файле используются в сторонних либах для валидации propTypes в рантайме,\n * т.к. компоненты библиотеки могут использоваться в js, где нет проверок типов Typescript\n */\n\n/**\n * Добавляет к type-checker для propType валидации метод isRequired\n *\n * @param validate оригинальный метод для валидации\n */\nfunction createChainableTypeChecker(\n    validate: (props: { [key: string]: any }, propName: string, componentName: string, location: string) => void,\n) {\n    function checkType(\n        isRequired: boolean,\n        props: { [key: string]: any },\n        propName: string,\n        componentName: string,\n        location: string,\n    ) {\n        // eslint-disable-next-line no-param-reassign\n        componentName = componentName || '';\n        if (props[propName] === null || props[propName] === undefined) {\n            if (isRequired) {\n                return new Error(\n                    `Required prop \\`${propName}\\` was not specified in \\`${componentName}\\`.`,\n                );\n            }\n\n            return null;\n        }\n\n        return validate(props, propName, componentName, location);\n    }\n\n    const chainedCheckType = checkType.bind(null, false);\n\n    chainedCheckType.isRequired = checkType.bind(null, true);\n\n    return chainedCheckType as Function;\n}\n\n/**\n * Проверяет, является ли заданный prop инстансом HTMLElement\n *\n * @param props пропы компонента\n * @param propName имя пропса для валидации\n * @param componentName имя компонента\n */\nfunction propTypeIsHtmlElement(props: { [key: string]: any }, propName: string, componentName: string): Error | null {\n    if (!(props[propName] instanceof (typeof HTMLElement === 'undefined' ? {} as any : HTMLElement))) {\n        return new Error(\n            `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`.\n            Expected valid HTMLElement object, ${typeof props[propName]} given.`,\n        );\n    }\n\n    return null;\n}\n\n/**\n * Враппер для prop-type валидаторов, позволяющий помечать prop как устаревший, сохраняя проверку типа\n *\n * @param propType оригинальный propType валидатор\n * @param message дополнительное сообщение\n */\nexport function deprecated(propType: Function, message: string): Function {\n    let warned = false;\n\n    return function (...args) {\n        const [props, propName, componentName] = args;\n        const prop = props[propName];\n\n        if (prop !== undefined && prop !== null && !warned) {\n            warned = true;\n            if (process.env.NODE_ENV !== 'production') {\n                // eslint-disable-next-line no-console\n                console.warn(`Property '${propName}' of '${componentName}' is deprecated. ${message}`);\n            }\n        }\n\n        return propType.call(this, ...args);\n    };\n}\n\n/**\n * Враппер для prop-type валидатора, позволяющий пометить один из типов как устаревший.\n * В случае, если заданный prop будет соответствовать старому валидатору, но не будет\n * соответствовать новому - пользователь будет об этом предупрежден\n *\n * @param oldType валидатор для старого типа.\n * @param newType валидатор для нового типа.\n * @param message дополнительное сообщение\n */\nexport function deprecatedType(oldType: Function, newType: Function, message: string): Function {\n    let warned = false;\n\n    return function (...args) {\n        const [, propName, componentName] = args;\n        const oldResult = oldType.call(this, ...args);\n        const newResult = newType.call(this, ...args);\n\n        if (process.env.NODE_ENV !== 'production' && !oldResult && !warned && newResult) {\n            warned = true;\n            // eslint-disable-next-line no-console\n            console.warn(`Given type of '${propName}' of '${componentName}' is deprecated. ${message}`);\n        }\n\n        return newResult;\n    };\n}\n\n/**\n * Готовый prop-type валидатор для проверки, что значение переданное в проп является HtmlElement\n */\nexport const HtmlElement = createChainableTypeChecker(propTypeIsHtmlElement);\n\n/**\n * Проверяет что значение пропса из заданного множества\n *\n * @param validationMapping множество допустимых значений пропса\n * @param controllingPropName имя контролируемого пропса\n */\nexport function createMappingPropValidator(validationMapping, controllingPropName) {\n    return function validateProp(props: { [key: string]: any }, propName: string, componentName: string) {\n        const controllingPropValue = props[controllingPropName];\n        const controlledPropValue = props[propName];\n\n        const propsDefined = controllingPropValue && controlledPropValue;\n        const availableOptions = validationMapping[controllingPropValue];\n\n        if (!propsDefined || !Array.isArray(availableOptions)) {\n            return null;\n        }\n\n        const isValidProp = availableOptions.indexOf(props[propName]) !== -1;\n\n        if (!isValidProp) {\n            return new Error(`Invalid prop '${propName}' supplied to ${componentName}.\n                Expected one of ${availableOptions} for prop '${controllingPropName}' equal to ${controllingPropValue}`);\n        }\n\n        return null;\n    };\n}\n"]}