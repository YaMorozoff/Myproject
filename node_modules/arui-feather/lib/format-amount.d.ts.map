{"version":3,"sources":["lib/format-amount.ts"],"names":[],"mappings":"AAEA,eAAO,MAAM,MAAM,QAA4B,CAAC;AAChD,eAAO,MAAM,kCAAkC,MAAM,CAAC;AAqCtD,oBAAY,MAAM,GAAG;IACjB;;OAEG;IACH,KAAK,EAAE,MAAM,CAAC;IACd;;OAEG;IACH,QAAQ,EAAE;QACN;;WAEG;QACH,IAAI,EAAE,MAAM,CAAC;QACb;;WAEG;QACH,QAAQ,EAAE,MAAM,CAAC;KACpB,CAAC;CACL,CAAC;AAEF,aAAK,eAAe,GAAG;IACnB;;OAEG;IACH,SAAS,EAAE,MAAM,CAAC;IAClB;;OAEG;IACH,SAAS,EAAE,MAAM,CAAC;IAClB;;OAEG;IACH,KAAK,EAAE,MAAM,CAAC;IACd;;OAEG;IACH,cAAc,EAAE,MAAM,CAAC;CAC1B,CAAC;AAEF;;GAEG;AACH,wBAAgB,YAAY,CAAC,MAAM,EAAE,MAAM,GAAG,eAAe,CAkC5D;AAED;;;GAGG;AACH,wBAAgB,oBAAoB,CAAC,MAAM,EAAE,MAAM,GAAG,MAAM,CAO3D","file":"format-amount.d.ts","sourcesContent":["import { getCurrencySymbol } from './currency-codes';\n\nexport const THINSP = String.fromCharCode(8201); // &thinsp;\nexport const AMOUNT_MAJOR_MINOR_PARTS_SEPARATOR = ',';\n\nconst AMOUNT_MAJOR_PARTS_SPLITTER = THINSP;\nconst AMOUNT_MAJOR_PART_SIZE = 3;\nconst AMOUNT_SPLIT_CODE_FROM = 4;\nconst NEGATIVE_AMOUNT_SYMBOL = '−';\n\n/**\n * Дробит мажорную часть суммы на части по указанному символу.\n *\n * @param amount Сумма для разбивки на части\n * @param partSize Размер частей суммы\n * @param splitter Символ, разбивающий части суммы\n * @param splitFrom Длинна суммы, начиная с которой необходимо осуществлять разбивку. По-умолчанию длинна\n * равняется пяти по требованию гайдлайнов: https://design.alfabank.ru/patterns/amount. Пример: 2900 — не разбивается,\n * 29 000 — разбивается.\n */\nfunction splitAmount(amount: string, partSize = 3, splitter: string = THINSP, splitFrom = 5): string {\n    const len = amount.length;\n\n    // Если длина суммы меньше требуемой, не форматируем сумму\n    if (len < splitFrom) {\n        return amount;\n    }\n\n    return amount\n        .split('')\n        .reduce((acc, item, i) => {\n            const isLastItem = i !== len - 1;\n            // eslint-disable-next-line no-mixed-operators\n            const isStartOfPart = (i - (len % partSize) + 1) % partSize === 0;\n\n            return isLastItem && isStartOfPart ? [...acc, item, splitter] : [...acc, item];\n        }, [])\n        .join('');\n}\n\nexport type Amount = {\n    /**\n     * Абсолютное значение суммы\n     */\n    value: number;\n    /**\n     * Параметры валюты\n     */\n    currency: {\n        /**\n         * Код валюты\n         */\n        code: string;\n        /**\n         * Количество минорных единиц валюты\n         */\n        minority: number;\n    };\n};\n\ntype FormattedAmount = {\n    /**\n     * Мажорная часть суммы\n     */\n    majorPart: string;\n    /**\n     * Минорная часть суммы\n     */\n    minorPart: string;\n    /**\n     * Валюта целиком\n     */\n    value: string;\n    /**\n     * Символ валюты\n     */\n    currencySymbol: string;\n};\n\n/**\n * Форматирует значение суммы.\n */\nexport function formatAmount(amount: Amount): FormattedAmount {\n    const {\n        value,\n        currency: { code },\n    } = amount;\n\n    let { minority } = amount.currency;\n\n    minority = minority === 0 ? 1 : minority; // because Math.log(0) => -Infinity\n\n    const fractionDigits = Math.log(minority) * Math.LOG10E;\n    const valueAbsStr = (Math.abs(value) / minority).toFixed(fractionDigits);\n\n    const [majorPart, minorPart] = valueAbsStr.split('.');\n\n    const majorPartSplitted = splitAmount(\n        majorPart,\n        AMOUNT_MAJOR_PART_SIZE,\n        AMOUNT_MAJOR_PARTS_SPLITTER,\n        AMOUNT_SPLIT_CODE_FROM,\n    );\n\n    const majorPartFormatted = value < 0 ? NEGATIVE_AMOUNT_SYMBOL + majorPartSplitted : majorPartSplitted;\n\n    const formattedValueStr = minorPart\n        ? majorPartFormatted + AMOUNT_MAJOR_MINOR_PARTS_SEPARATOR + minorPart\n        : majorPartFormatted;\n\n    return {\n        majorPart: majorPartFormatted,\n        minorPart,\n        value: formattedValueStr,\n        currencySymbol: getCurrencySymbol(code),\n    };\n}\n\n/**\n * Форматирует значение суммы и возвращает в виде строки.\n * Использует функционал formatAmount\n */\nexport function formatAmountToString(amount: Amount): string {\n    const {\n        value,\n        currencySymbol,\n    } = formatAmount(amount);\n\n    return `${value}${THINSP}${currencySymbol}`;\n}\n"]}