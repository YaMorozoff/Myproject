{"version":3,"sources":["lib/format-amount.ts"],"names":[],"mappings":";;;;;;;;;AAAA,mDAAqD;AAExC,QAAA,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,WAAW;AAC/C,QAAA,kCAAkC,GAAG,GAAG,CAAC;AAEtD,IAAM,2BAA2B,GAAG,cAAM,CAAC;AAC3C,IAAM,sBAAsB,GAAG,CAAC,CAAC;AACjC,IAAM,sBAAsB,GAAG,CAAC,CAAC;AACjC,IAAM,sBAAsB,GAAG,GAAG,CAAC;AAEnC;;;;;;;;;GASG;AACH,SAAS,WAAW,CAAC,MAAc,EAAE,QAAY,EAAE,QAAyB,EAAE,SAAa;IAAtD,yBAAA,EAAA,YAAY;IAAE,yBAAA,EAAA,WAAmB,cAAM;IAAE,0BAAA,EAAA,aAAa;IACvF,IAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC;IAE1B,0DAA0D;IAC1D,IAAI,GAAG,GAAG,SAAS,EAAE;QACjB,OAAO,MAAM,CAAC;KACjB;IAED,OAAO,MAAM;SACR,KAAK,CAAC,EAAE,CAAC;SACT,MAAM,CAAC,UAAC,GAAG,EAAE,IAAI,EAAE,CAAC;QACjB,IAAM,UAAU,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,CAAC;QACjC,8CAA8C;QAC9C,IAAM,aAAa,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,KAAK,CAAC,CAAC;QAElE,OAAO,UAAU,IAAI,aAAa,CAAC,CAAC,gBAAK,GAAG,GAAE,IAAI,EAAE,QAAQ,GAAE,CAAC,gBAAK,GAAG,GAAE,IAAI,EAAC,CAAC;IACnF,CAAC,EAAE,EAAE,CAAC;SACL,IAAI,CAAC,EAAE,CAAC,CAAC;AAClB,CAAC;AAyCD;;GAEG;AACH,SAAgB,YAAY,CAAC,MAAc;IAEnC,IAAA,oBAAK,EACO,2BAAI,CACT;IAEL,IAAA,mCAAQ,CAAqB;IAEnC,QAAQ,GAAG,QAAQ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,mCAAmC;IAE7E,IAAM,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;IACxD,IAAM,WAAW,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAEnE,IAAA,2BAA+C,EAA9C,iBAAS,EAAE,iBAAmC,CAAC;IAEtD,IAAM,iBAAiB,GAAG,WAAW,CACjC,SAAS,EACT,sBAAsB,EACtB,2BAA2B,EAC3B,sBAAsB,CACzB,CAAC;IAEF,IAAM,kBAAkB,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,sBAAsB,GAAG,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,CAAC;IAEtG,IAAM,iBAAiB,GAAG,SAAS;QAC/B,CAAC,CAAC,kBAAkB,GAAG,0CAAkC,GAAG,SAAS;QACrE,CAAC,CAAC,kBAAkB,CAAC;IAEzB,OAAO;QACH,SAAS,EAAE,kBAAkB;QAC7B,SAAS,WAAA;QACT,KAAK,EAAE,iBAAiB;QACxB,cAAc,EAAE,kCAAiB,CAAC,IAAI,CAAC;KAC1C,CAAC;AACN,CAAC;AAlCD,oCAkCC;AAED;;;GAGG;AACH,SAAgB,oBAAoB,CAAC,MAAc;IACzC,IAAA,yBAGkB,EAFpB,gBAAK,EACL,kCACoB,CAAC;IAEzB,OAAO,KAAG,KAAK,GAAG,cAAM,GAAG,cAAgB,CAAC;AAChD,CAAC;AAPD,oDAOC","file":"format-amount.js","sourcesContent":["import { getCurrencySymbol } from './currency-codes';\n\nexport const THINSP = String.fromCharCode(8201); // &thinsp;\nexport const AMOUNT_MAJOR_MINOR_PARTS_SEPARATOR = ',';\n\nconst AMOUNT_MAJOR_PARTS_SPLITTER = THINSP;\nconst AMOUNT_MAJOR_PART_SIZE = 3;\nconst AMOUNT_SPLIT_CODE_FROM = 4;\nconst NEGATIVE_AMOUNT_SYMBOL = '−';\n\n/**\n * Дробит мажорную часть суммы на части по указанному символу.\n *\n * @param amount Сумма для разбивки на части\n * @param partSize Размер частей суммы\n * @param splitter Символ, разбивающий части суммы\n * @param splitFrom Длинна суммы, начиная с которой необходимо осуществлять разбивку. По-умолчанию длинна\n * равняется пяти по требованию гайдлайнов: https://design.alfabank.ru/patterns/amount. Пример: 2900 — не разбивается,\n * 29 000 — разбивается.\n */\nfunction splitAmount(amount: string, partSize = 3, splitter: string = THINSP, splitFrom = 5): string {\n    const len = amount.length;\n\n    // Если длина суммы меньше требуемой, не форматируем сумму\n    if (len < splitFrom) {\n        return amount;\n    }\n\n    return amount\n        .split('')\n        .reduce((acc, item, i) => {\n            const isLastItem = i !== len - 1;\n            // eslint-disable-next-line no-mixed-operators\n            const isStartOfPart = (i - (len % partSize) + 1) % partSize === 0;\n\n            return isLastItem && isStartOfPart ? [...acc, item, splitter] : [...acc, item];\n        }, [])\n        .join('');\n}\n\nexport type Amount = {\n    /**\n     * Абсолютное значение суммы\n     */\n    value: number;\n    /**\n     * Параметры валюты\n     */\n    currency: {\n        /**\n         * Код валюты\n         */\n        code: string;\n        /**\n         * Количество минорных единиц валюты\n         */\n        minority: number;\n    };\n};\n\ntype FormattedAmount = {\n    /**\n     * Мажорная часть суммы\n     */\n    majorPart: string;\n    /**\n     * Минорная часть суммы\n     */\n    minorPart: string;\n    /**\n     * Валюта целиком\n     */\n    value: string;\n    /**\n     * Символ валюты\n     */\n    currencySymbol: string;\n};\n\n/**\n * Форматирует значение суммы.\n */\nexport function formatAmount(amount: Amount): FormattedAmount {\n    const {\n        value,\n        currency: { code },\n    } = amount;\n\n    let { minority } = amount.currency;\n\n    minority = minority === 0 ? 1 : minority; // because Math.log(0) => -Infinity\n\n    const fractionDigits = Math.log(minority) * Math.LOG10E;\n    const valueAbsStr = (Math.abs(value) / minority).toFixed(fractionDigits);\n\n    const [majorPart, minorPart] = valueAbsStr.split('.');\n\n    const majorPartSplitted = splitAmount(\n        majorPart,\n        AMOUNT_MAJOR_PART_SIZE,\n        AMOUNT_MAJOR_PARTS_SPLITTER,\n        AMOUNT_SPLIT_CODE_FROM,\n    );\n\n    const majorPartFormatted = value < 0 ? NEGATIVE_AMOUNT_SYMBOL + majorPartSplitted : majorPartSplitted;\n\n    const formattedValueStr = minorPart\n        ? majorPartFormatted + AMOUNT_MAJOR_MINOR_PARTS_SEPARATOR + minorPart\n        : majorPartFormatted;\n\n    return {\n        majorPart: majorPartFormatted,\n        minorPart,\n        value: formattedValueStr,\n        currencySymbol: getCurrencySymbol(code),\n    };\n}\n\n/**\n * Форматирует значение суммы и возвращает в виде строки.\n * Использует функционал formatAmount\n */\nexport function formatAmountToString(amount: Amount): string {\n    const {\n        value,\n        currencySymbol,\n    } = formatAmount(amount);\n\n    return `${value}${THINSP}${currencySymbol}`;\n}\n"]}