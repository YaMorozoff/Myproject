import React from 'react';
export declare type DropzoneProps = {
    /**
     * Дочерние компоненты
     */
    children?: React.ReactNode;
    /**
     * Дополнительный класс
     */
    className?: string;
    /**
     * Идентификатор для систем автоматизированного тестирования
     */
    'data-test-id'?: string;
    /**
     * Уникальный идентификатор блока
     */
    id?: string;
    /**
     * Уникальное имя блока
     */
    name?: string;
    /**
     * Обработчик события 'drop'
     */
    onDrop?: (files?: any[]) => void;
    /**
     * Обработчик события 'dragover'
     */
    onDragOver?: (event?: React.FocusEvent<any>) => void;
    /**
     * Обработчик события 'dragleave'
     */
    onDragLeave?: (event?: React.FocusEvent<any>) => void;
    /**
     * Обработчик события 'dragenter'
     */
    onDragEnter?: (event?: React.FocusEvent<any>) => void;
    /**
     * Тема компонента
     */
    theme?: 'alfa-on-color' | 'alfa-on-white';
    /**
     * Текст-подсказка поверх drop-зоны
     */
    text?: string;
};
/**
 * Компонент drag-and-drop контейнер для прикрепления файлов.
 */
export declare class Dropzone extends React.PureComponent<DropzoneProps> {
    protected cn: (this: void | {
        props?: Record<string, unknown>;
    }, elementNameOrMods?: string | {
        [key: string]: string | number | boolean;
    }, mods?: {
        [key: string]: string | number | boolean;
    }) => string;
    static defaultProps: Partial<DropzoneProps>;
    state: {
        dragging: boolean;
    };
    root: HTMLSpanElement;
    private dragCounter;
    private handleDragOver;
    private handleDragEnter;
    private handleDragLeave;
    private handleDrop;
    componentDidMount(): void;
    render(): JSX.Element;
}
declare const _default: React.ForwardRefExoticComponent<DropzoneProps & React.RefAttributes<Dropzone>> & Dropzone;
export default _default;
