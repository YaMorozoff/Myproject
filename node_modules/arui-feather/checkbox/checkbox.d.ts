import React from 'react';
export declare type CheckboxProps = ({
    /**
     * Тип чекбокса
     */
    type?: 'normal';
    /**
     * Размер компонента
     */
    size?: 'm' | 'l';
} | {
    /**
     * Тип чекбокса
     */
    type?: 'button';
    /**
     * Размер компонента
     */
    size?: 's' | 'm' | 'l' | 'xl';
    /**
     * Управление шириной кнопки для типа 'button'. При значении
     'available' растягивает кнопку на ширину родителя
     */
    width?: 'default' | 'available';
}) & {
    /**
     * Текст подписи к чекбоксу
     */
    text?: React.ReactNode;
    /**
     * Идентификатор компонента в DOM
     */
    id?: string;
    /**
     * Имя компонента в DOM
     */
    name?: string;
    /**
     * Текст всплывающей подсказки
     */
    title?: string;
    /**
     * Значение чекбокса, которое будет отправлено на сервер, если он выбран
     */
    value?: string;
    /**
     * Управление возможностью изменять состояние 'checked' компонента
     */
    disabled?: boolean;
    /**
     * Управление состоянием вкл/выкл компонента
     */
    checked?: boolean;
    /**
     * Управление неопределенным состоянием чекбокса
     */
    indeterminate?: boolean;
    /**
     * Тема компонента
     */
    theme?: 'alfa-on-color' | 'alfa-on-white';
    /**
     * Дополнительный класс
     */
    className?: string;
    /**
     * Обработчик изменения значения 'checked' компонента, принимает на вход isChecked и value компонента
     */
    onChange?: (isChecked?: boolean, value?: string, event?: React.ChangeEvent<any>) => void;
    /**
     * Обработчик фокуса комнонента
     */
    onFocus?: (event?: React.FocusEvent<any>) => void;
    /**
     * Обработчик снятия фокуса компонента
     */
    onBlur?: (event?: React.FocusEvent<any>) => void;
    /**
     * Обработчик события наведения курсора на чекбокс
     */
    onMouseEnter?: (event?: React.MouseEvent<any>) => void;
    /**
     * Обработчик события снятия курсора с чекбокса
     */
    onMouseLeave?: (event?: React.MouseEvent<any>) => void;
    /**
     * Идентификатор для систем автоматизированного тестирования
     */
    'data-test-id'?: string;
};
/**
 * Компонент чекбокса.
 */
export declare class CheckBox extends React.PureComponent<CheckboxProps> {
    protected cn: (this: void | {
        props?: Record<string, unknown>;
    }, elementNameOrMods?: string | {
        [key: string]: string | number | boolean;
    }, mods?: {
        [key: string]: string | number | boolean;
    }) => string;
    static defaultProps: Partial<CheckboxProps>;
    state: {
        focused: boolean;
        hovered: boolean;
        checked: boolean;
    };
    private root;
    render(): JSX.Element;
    renderNormalCheckbox(checked: any): JSX.Element[];
    renderButtonCheckbox(checked: any): JSX.Element[];
    private handleInputControlClick;
    private handleChange;
    private handleFocus;
    private handleUnfocus;
    private handleBlur;
    private handleMouseEnter;
    private handleMouseLeave;
    /**
     * Устанавливает фокус на чекбокс.
     */
    focus(): void;
    /**
     * Убирает фокус с чекбокса.
     */
    blur(): void;
    /**
     * Скроллит страницу до чекбокса.
     */
    scrollTo(): void;
}
declare const _default: React.ForwardRefExoticComponent<({
    /**
     * Тип чекбокса
     */
    type?: "normal";
    /**
     * Размер компонента
     */
    size?: "m" | "l";
} & {
    /**
     * Текст подписи к чекбоксу
     */
    text?: React.ReactNode;
    /**
     * Идентификатор компонента в DOM
     */
    id?: string;
    /**
     * Имя компонента в DOM
     */
    name?: string;
    /**
     * Текст всплывающей подсказки
     */
    title?: string;
    /**
     * Значение чекбокса, которое будет отправлено на сервер, если он выбран
     */
    value?: string;
    /**
     * Управление возможностью изменять состояние 'checked' компонента
     */
    disabled?: boolean;
    /**
     * Управление состоянием вкл/выкл компонента
     */
    checked?: boolean;
    /**
     * Управление неопределенным состоянием чекбокса
     */
    indeterminate?: boolean;
    /**
     * Тема компонента
     */
    theme?: import("../cn").ThemeType;
    /**
     * Дополнительный класс
     */
    className?: string;
    /**
     * Обработчик изменения значения 'checked' компонента, принимает на вход isChecked и value компонента
     */
    onChange?: (isChecked?: boolean, value?: string, event?: React.ChangeEvent<any>) => void;
    /**
     * Обработчик фокуса комнонента
     */
    onFocus?: (event?: React.FocusEvent<any>) => void;
    /**
     * Обработчик снятия фокуса компонента
     */
    onBlur?: (event?: React.FocusEvent<any>) => void;
    /**
     * Обработчик события наведения курсора на чекбокс
     */
    onMouseEnter?: (event?: React.MouseEvent<any, MouseEvent>) => void;
    /**
     * Обработчик события снятия курсора с чекбокса
     */
    onMouseLeave?: (event?: React.MouseEvent<any, MouseEvent>) => void;
    /**
     * Идентификатор для систем автоматизированного тестирования
     */
    'data-test-id'?: string;
} & React.RefAttributes<CheckBox>) | ({
    /**
     * Тип чекбокса
     */
    type?: "button";
    /**
     * Размер компонента
     */
    size?: "s" | "m" | "l" | "xl";
    /**
     * Управление шириной кнопки для типа 'button'. При значении
     'available' растягивает кнопку на ширину родителя
     */
    width?: "default" | "available";
} & {
    /**
     * Текст подписи к чекбоксу
     */
    text?: React.ReactNode;
    /**
     * Идентификатор компонента в DOM
     */
    id?: string;
    /**
     * Имя компонента в DOM
     */
    name?: string;
    /**
     * Текст всплывающей подсказки
     */
    title?: string;
    /**
     * Значение чекбокса, которое будет отправлено на сервер, если он выбран
     */
    value?: string;
    /**
     * Управление возможностью изменять состояние 'checked' компонента
     */
    disabled?: boolean;
    /**
     * Управление состоянием вкл/выкл компонента
     */
    checked?: boolean;
    /**
     * Управление неопределенным состоянием чекбокса
     */
    indeterminate?: boolean;
    /**
     * Тема компонента
     */
    theme?: import("../cn").ThemeType;
    /**
     * Дополнительный класс
     */
    className?: string;
    /**
     * Обработчик изменения значения 'checked' компонента, принимает на вход isChecked и value компонента
     */
    onChange?: (isChecked?: boolean, value?: string, event?: React.ChangeEvent<any>) => void;
    /**
     * Обработчик фокуса комнонента
     */
    onFocus?: (event?: React.FocusEvent<any>) => void;
    /**
     * Обработчик снятия фокуса компонента
     */
    onBlur?: (event?: React.FocusEvent<any>) => void;
    /**
     * Обработчик события наведения курсора на чекбокс
     */
    onMouseEnter?: (event?: React.MouseEvent<any, MouseEvent>) => void;
    /**
     * Обработчик события снятия курсора с чекбокса
     */
    onMouseLeave?: (event?: React.MouseEvent<any, MouseEvent>) => void;
    /**
     * Идентификатор для систем автоматизированного тестирования
     */
    'data-test-id'?: string;
} & React.RefAttributes<CheckBox>)> & CheckBox;
export default _default;
