{"version":3,"sources":["test-utils.ts"],"names":[],"mappings":"AAQA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,SAAS,EAAE,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAK3D,aAAK,WAAW,GAAG;IACf;;OAEG;IACH,QAAQ,EAAE,OAAO,GAAG,KAAK,CAAC,SAAS,CAAC;IACpC;;OAEG;IACH,IAAI,EAAE,OAAO,GAAG,IAAI,CAAC;IACrB;;OAEG;IACH,SAAS,EAAE,WAAW,CAAC;CAC1B,CAAC;AAEF,aAAK,OAAO,GAAG;IACX;;OAEG;IACH,SAAS,CAAC,EAAE,WAAW,CAAC;CAC3B,CAAC;AAIF;;;;;;;GAOG;AACH,wBAAgB,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,YAAY,EAAE,OAAO,GAAE,OAAY,GAAG,WAAW,CAsBtF;AAED;;GAEG;AACH,wBAAgB,OAAO,SAQtB;AAED;;;;;;GAMG;AACH,wBAAgB,QAAQ,CAAC,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,OAAO,QAAQ,EAAE,SAAS,EAAE,SAAS,CAAC,kBAAkB,QAEpH;AAED;;;;GAIG;AACH,wBAAgB,YAAY,CAAC,KAAK,EAAE,KAAK,CAAC,cAAc,QAIvD","file":"test-utils.d.ts","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/* eslint import/no-extraneous-dependencies: [2, {\"devDependencies\": true}] */\n/* eslint react/no-render-return-value: 0 */\n/* eslint react/no-find-dom-node: 0 */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TestUtils, { Simulate } from 'react-dom/test-utils';\n\n// eslint-disable-next-line no-console\nconsole.warn('arui-feather/test-utils is deprecated. Use `jest` + `enzyme` instead');\n\ntype TestWrapper = {\n    /**\n     * Ссылка на экземпляр React компонента.\n     */\n    instance: Element | React.Component;\n    /**\n     * Корневой HTML узел компонента.\n     */\n    node: Element | Text;\n    /**\n     * HTML узел контейнера, в котором отрендерен компонент.\n     */\n    container: HTMLElement;\n};\n\ntype Options = {\n    /**\n     * Контейнер, в который нарендерить компонент.\n     */\n    container?: HTMLElement;\n};\n\nlet sharedContainer: HTMLElement;\n\n/**\n * Рендерит компонент в настоящий DOM, возвращает тестовую обертку.\n *\n * @param element JSX для рендера.\n * @param options Опции для рендера.\n *\n * @returns Тестовая обертка.\n */\nexport function render(element: React.ReactElement, options: Options = {}): TestWrapper {\n    let { container } = options;\n\n    if (!container) {\n        if (!sharedContainer) {\n            sharedContainer = document.createElement('div');\n            document.body.appendChild(sharedContainer);\n        }\n        container = sharedContainer;\n    }\n\n    const instance = ReactDOM.render(element, container);\n\n    if (!instance) {\n        return null;\n    }\n\n    return {\n        instance,\n        node: ReactDOM.findDOMNode(instance),\n        container,\n    };\n}\n\n/**\n * Очищает содержимое DOM после тестов.\n */\nexport function cleanUp() {\n    if (sharedContainer) {\n        sharedContainer = null;\n    }\n\n    while (document.body.childNodes.length > 0) {\n        document.body.removeChild(document.body.firstChild);\n    }\n}\n\n/**\n * Симулирует событие на HTML узле.\n *\n * @param node HTML узел, на котором необходимо сгенерить событие.\n * @param eventType Тип события.\n * @param eventData Данные для прокисрования в событие.\n */\nexport function simulate(node: HTMLElement, eventType: keyof typeof Simulate, eventData: TestUtils.SyntheticEventData) {\n    TestUtils.Simulate[eventType](node, eventData);\n}\n\n/**\n * Обеспечивает сохранение полей события в случае SyntheticEvent.\n *\n * @param event Synthetic event.\n */\nexport function eventPersist(event: React.SyntheticEvent) {\n    if (event.persist) {\n        event.persist();\n    }\n}\n"]}