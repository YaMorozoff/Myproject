{"version":3,"sources":["calendar-input/utils.ts"],"names":[],"mappings":"AAMA;;;;;GAKG;AACH,wBAAgB,SAAS,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,GAAG,MAAM,GAAG,IAAI,CActE;AAED;;;;;;GAMG;AACH,wBAAgB,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,UAQlF;AAED;;;;;;;GAOG;AACH,wBAAgB,cAAc,CAAC,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,YAAY,CAAC,EAAE,MAAM,EAAE,UAAU,CAAC,EAAE,MAAM,UAqBvG;AAED;;GAEG;AACH,wBAAgB,oBAAoB,YAQnC","file":"utils.d.ts","sourcesContent":["import getTime from 'date-fns/get_time';\nimport startOfDay from 'date-fns/start_of_day';\nimport formatDate from 'date-fns/format';\nimport isDateValid from 'date-fns/is_valid';\nimport { parse } from '../lib/date-utils';\n\n/**\n * Разбирает введенную пользователем дату используя заданный формат.\n *\n * @param value Дата\n * @param format Ожидаемый формат даты\n */\nexport function parseDate(value: string, format: string): number | null {\n    const valueTrimmed = value ? value.replace(/~+$/, '') : '';\n    let result = null;\n\n    // Проверяем, чтобы пользователь ввёл полную строку даты без пробелов.\n    if (valueTrimmed.length === format.length && !valueTrimmed.match(/\\s/)) {\n        const valueDate = parse(valueTrimmed, format);\n\n        if (isDateValid(valueDate)) {\n            result = valueDate.valueOf();\n        }\n    }\n\n    return result;\n}\n\n/**\n * Изменяет формат даты с одного на другой.\n *\n * @param value Оригинальная строка с датой\n * @param inFormat Входной формат даты\n * @param outFormat Формат возвращаемой даты\n */\nexport function changeDateFormat(value: string, inFormat: string, outFormat: string) {\n    const date = parseDate(value, inFormat);\n\n    if (date) {\n        return formatDate(date, outFormat);\n    }\n\n    return value;\n}\n\n/**\n * Возвращает дату с корректным месяцем.\n *\n * @param value Строка даты\n * @param format Формат строки с датой\n * @param earlierLimit Левая граница дат\n * @param laterLimit Правая граница дат\n */\nexport function calculateMonth(value: string, format: string, earlierLimit?: number, laterLimit?: number) {\n    let newValue: string | number = value;\n\n    if (typeof newValue === 'string') {\n        newValue = parseDate(newValue, format);\n    }\n\n    if (!newValue || newValue !== newValue) { // eslint-disable-line no-self-compare\n        newValue = Date.now();\n    } else {\n        newValue = getTime(newValue);\n    }\n\n    if (earlierLimit && earlierLimit > newValue) {\n        return startOfDay(earlierLimit).valueOf();\n    }\n    if (laterLimit && laterLimit < newValue) {\n        return startOfDay(laterLimit).valueOf();\n    }\n\n    return startOfDay(newValue).valueOf();\n}\n\n/**\n * Возвращает `true`, если поддерживается `input[type=\"date\"]`\n */\nexport function isInputDateSupported() {\n    const input = document.createElement('input');\n    const value = 'a';\n\n    input.setAttribute('type', 'date');\n    input.setAttribute('value', value);\n\n    return input.value !== value;\n}\n"]}