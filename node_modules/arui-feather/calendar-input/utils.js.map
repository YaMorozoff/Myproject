{"version":3,"sources":["calendar-input/utils.ts"],"names":[],"mappings":";;;;;AAAA,+DAAwC;AACxC,uEAA+C;AAC/C,2DAAyC;AACzC,+DAA4C;AAC5C,gDAA0C;AAE1C;;;;;GAKG;AACH,SAAgB,SAAS,CAAC,KAAa,EAAE,MAAc;IACnD,IAAM,YAAY,GAAG,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC3D,IAAI,MAAM,GAAG,IAAI,CAAC;IAElB,sEAAsE;IACtE,IAAI,YAAY,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;QACpE,IAAM,SAAS,GAAG,kBAAK,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;QAE9C,IAAI,kBAAW,CAAC,SAAS,CAAC,EAAE;YACxB,MAAM,GAAG,SAAS,CAAC,OAAO,EAAE,CAAC;SAChC;KACJ;IAED,OAAO,MAAM,CAAC;AAClB,CAAC;AAdD,8BAcC;AAED;;;;;;GAMG;AACH,SAAgB,gBAAgB,CAAC,KAAa,EAAE,QAAgB,EAAE,SAAiB;IAC/E,IAAM,IAAI,GAAG,SAAS,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;IAExC,IAAI,IAAI,EAAE;QACN,OAAO,gBAAU,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;KACtC;IAED,OAAO,KAAK,CAAC;AACjB,CAAC;AARD,4CAQC;AAED;;;;;;;GAOG;AACH,SAAgB,cAAc,CAAC,KAAa,EAAE,MAAc,EAAE,YAAqB,EAAE,UAAmB;IACpG,IAAI,QAAQ,GAAoB,KAAK,CAAC;IAEtC,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;QAC9B,QAAQ,GAAG,SAAS,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;KAC1C;IAED,IAAI,CAAC,QAAQ,IAAI,QAAQ,KAAK,QAAQ,EAAE,EAAE,sCAAsC;QAC5E,QAAQ,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;KACzB;SAAM;QACH,QAAQ,GAAG,kBAAO,CAAC,QAAQ,CAAC,CAAC;KAChC;IAED,IAAI,YAAY,IAAI,YAAY,GAAG,QAAQ,EAAE;QACzC,OAAO,sBAAU,CAAC,YAAY,CAAC,CAAC,OAAO,EAAE,CAAC;KAC7C;IACD,IAAI,UAAU,IAAI,UAAU,GAAG,QAAQ,EAAE;QACrC,OAAO,sBAAU,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE,CAAC;KAC3C;IAED,OAAO,sBAAU,CAAC,QAAQ,CAAC,CAAC,OAAO,EAAE,CAAC;AAC1C,CAAC;AArBD,wCAqBC;AAED;;GAEG;AACH,SAAgB,oBAAoB;IAChC,IAAM,KAAK,GAAG,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAC9C,IAAM,KAAK,GAAG,GAAG,CAAC;IAElB,KAAK,CAAC,YAAY,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IACnC,KAAK,CAAC,YAAY,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;IAEnC,OAAO,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC;AACjC,CAAC;AARD,oDAQC","file":"utils.js","sourcesContent":["import getTime from 'date-fns/get_time';\nimport startOfDay from 'date-fns/start_of_day';\nimport formatDate from 'date-fns/format';\nimport isDateValid from 'date-fns/is_valid';\nimport { parse } from '../lib/date-utils';\n\n/**\n * Разбирает введенную пользователем дату используя заданный формат.\n *\n * @param value Дата\n * @param format Ожидаемый формат даты\n */\nexport function parseDate(value: string, format: string): number | null {\n    const valueTrimmed = value ? value.replace(/~+$/, '') : '';\n    let result = null;\n\n    // Проверяем, чтобы пользователь ввёл полную строку даты без пробелов.\n    if (valueTrimmed.length === format.length && !valueTrimmed.match(/\\s/)) {\n        const valueDate = parse(valueTrimmed, format);\n\n        if (isDateValid(valueDate)) {\n            result = valueDate.valueOf();\n        }\n    }\n\n    return result;\n}\n\n/**\n * Изменяет формат даты с одного на другой.\n *\n * @param value Оригинальная строка с датой\n * @param inFormat Входной формат даты\n * @param outFormat Формат возвращаемой даты\n */\nexport function changeDateFormat(value: string, inFormat: string, outFormat: string) {\n    const date = parseDate(value, inFormat);\n\n    if (date) {\n        return formatDate(date, outFormat);\n    }\n\n    return value;\n}\n\n/**\n * Возвращает дату с корректным месяцем.\n *\n * @param value Строка даты\n * @param format Формат строки с датой\n * @param earlierLimit Левая граница дат\n * @param laterLimit Правая граница дат\n */\nexport function calculateMonth(value: string, format: string, earlierLimit?: number, laterLimit?: number) {\n    let newValue: string | number = value;\n\n    if (typeof newValue === 'string') {\n        newValue = parseDate(newValue, format);\n    }\n\n    if (!newValue || newValue !== newValue) { // eslint-disable-line no-self-compare\n        newValue = Date.now();\n    } else {\n        newValue = getTime(newValue);\n    }\n\n    if (earlierLimit && earlierLimit > newValue) {\n        return startOfDay(earlierLimit).valueOf();\n    }\n    if (laterLimit && laterLimit < newValue) {\n        return startOfDay(laterLimit).valueOf();\n    }\n\n    return startOfDay(newValue).valueOf();\n}\n\n/**\n * Возвращает `true`, если поддерживается `input[type=\"date\"]`\n */\nexport function isInputDateSupported() {\n    const input = document.createElement('input');\n    const value = 'a';\n\n    input.setAttribute('type', 'date');\n    input.setAttribute('value', value);\n\n    return input.value !== value;\n}\n"]}