{"version":3,"sources":["input/input.tsx"],"names":[],"mappings":"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","file":"input.d.ts","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/* eslint-disable max-len */\n\nimport React from 'react';\nimport { createCn } from 'bem-react-classname';\nimport { withTheme } from '../cn';\n\nimport { FormatCharacters } from '../masked-input/mask';\nimport IconClose from '../icon/ui/close';\nimport IconButton from '../icon-button/icon-button';\nimport MaskedInput from '../masked-input/masked-input';\n\nimport scrollTo from '../lib/scroll-to';\nimport { SCROLL_TO_CORRECTION } from '../vars';\nimport { setRef } from '../lib/set-ref';\n\nexport type InputProps = {\n\n    /**\n     * Тип поля.\n     Внимание, тип 'number' не умеет работать с масками, в том числе с 'selectionStart' и 'selectionEnd'.\n     Подробнее: <a href=\"http://w3c.github.io/html/sec-forms.html#does-not-apply\" target=\"_blank\">http://w3c.github.io/html/sec-forms.html#does-not-apply</a>\n     * @default 'text'\n     */\n    type?: 'number' | 'card' | 'email' | 'file' | 'hidden' | 'money' | 'password' | 'tel' | 'text';\n\n    /**\n     * Тип инпута (filled только на белом фоне в размере m)\n     * @default 'default'\n     */\n    view?: 'default' | 'filled';\n\n    /**\n     * Управление возможностью компонента занимать всю ширину родителя\n     */\n    width?: 'default' | 'available';\n\n    /**\n     * Управление автозаполнением компонента. В случае передачи `true` или `false` подставляет `on` или `off`.\n     Строка подставляется как есть.\n     */\n    autocomplete?: boolean | string;\n\n    /**\n     * Управление возможностью изменения атрибута компонента, установка соответствующего класса-модификатора для оформления\n     */\n    disabled?: boolean;\n\n    /**\n     * Управление возможностью изменения атрибута компонента (без установки класса-модификатора для оформления)\n     */\n    disabledAttr?: boolean;\n\n    /**\n     * Управление возможностью изменения класса-модификатора компонента\n     */\n    focused?: boolean;\n\n    /**\n     * Максимальное число символов\n     */\n    maxLength?: number;\n\n    /**\n     * Иконка компонента\n     */\n    icon?: React.ReactNode;\n\n    /**\n     * Управление наличием крестика, сбрасывающего значение 'value'\n     */\n    clear?: boolean;\n\n    /**\n     * Уникальный идентификатор блока\n     */\n    id?: string;\n\n    /**\n     * Уникальное имя блока\n     */\n    name?: string;\n\n    /**\n     * Содержимое поля ввода\n     */\n    value?: string;\n\n    /**\n     * Содержимое поля ввода, указанное по умолчанию\n     */\n    defaultValue?: string;\n\n    /**\n     * Последовательность перехода между контролами при нажатии на Tab\n     */\n    tabIndex?: number;\n\n    /**\n     * Определяет маску для ввода значений. <a href=\"https://github.com/insin/inputmask-core#pattern\" target=\"_blank\">Шаблон маски</a>\n     */\n    mask?: string;\n\n    /**\n     * Разрешает ставить пробелы в инпуте, если они указаны в форматтере, заданном свойством `maskFormatCharacters`.\n     * Не оказывает влияния, если не установлено свойство `maskFormatCharacters`\n     */\n    useWhitespacesInMask?: boolean;\n\n    /**\n     * Кастомные форматтеры символов маски, использует формат formatCharacters из `inputmask-core`\n     */\n    maskFormatCharacters?: FormatCharacters;\n\n    /**\n     * Стандартное ствойство HTMLInputElement 'pattern'. Может быть использовано для показа корректной клавиатуры на мобильных устройствах.\n     */\n    pattern?: string;\n\n    /**\n     * Управление встроенной проверкой данных введённых пользователем в поле на корректность\n     * @default false\n     */\n    formNoValidate?: boolean;\n\n    /**\n     * Добавление дополнительных элементов к инпуту слева\n     */\n    leftAddons?: React.ReactNode;\n\n    /**\n     * Добавление дополнительных элементов к инпуту справа\n     */\n    rightAddons?: React.ReactNode;\n\n    /**\n     * Лейбл для поля\n     */\n    label?: React.ReactNode;\n\n    /**\n     * Подсказка в поле\n     */\n    placeholder?: string;\n\n    /**\n     * Подсказка под полем\n     */\n    hint?: React.ReactNode;\n\n    /**\n     * Отображение ошибки\n     */\n    error?: React.ReactNode;\n\n    /**\n     * Сброс ошибки при установке фокуса\n     * @default true\n     */\n    resetError?: boolean;\n\n    /**\n     * Размер компонента\n     * @default 'm'\n     */\n    size?: 's' | 'm' | 'l' | 'xl';\n\n    /**\n     * Тема компонента\n     */\n    theme?: 'alfa-on-color' | 'alfa-on-white';\n\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Тултип, который появляется при наведении\n     */\n    title?: string;\n\n    /**\n     * Проброс ref для `input` элемента.\n     */\n    inputRef?: React.Ref<HTMLInputElement>;\n\n    /**\n     * Обработчик изменения значения 'value'\n     */\n    onChange?: (value?: string, event?: React.ChangeEvent<any>) => void;\n\n    /**\n     * Обработчик фокуса поля\n     */\n    onFocus?: (event?: React.FocusEvent<any>) => void;\n\n    /**\n     * Обработчик клика по полю\n     */\n    onClick?: (event?: React.MouseEvent<any>) => void;\n\n    /**\n     * Обработчик снятия фокуса с поля\n     */\n    onBlur?: (event?: React.FocusEvent<any>) => void;\n\n    /**\n     * Обработчик клика по крестику сбрасываещему значение 'value'\n     */\n    onClearClick?: (event?: React.MouseEvent<any>) => void;\n\n    /**\n     * Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте\n     */\n    onKeyDown?: (event?: React.KeyboardEvent<any>) => void;\n\n    /**\n     * Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте\n     */\n    onKeyUp?: (event?: React.KeyboardEvent<any>) => void;\n\n    /**\n     * Обработчик события вставки текста в поле\n     */\n    onPaste?: (event?: React.ClipboardEvent<any>) => void;\n\n    /**\n     * Обработчик события касания по полю\n     */\n    onTouchStart?: (event?: React.TouchEvent<any>) => void;\n\n    /**\n     * Обработчик события прекращения касания по полю\n     */\n    onTouchEnd?: (event?: React.TouchEvent<any>) => void;\n\n    /**\n     * Обработчик события перемещения при касании по полю\n     */\n    onTouchMove?: (event?: React.TouchEvent<any>) => void;\n\n    /**\n     * Обработчик события прерывания касания по полю\n     */\n    onTouchCancel?: (event?: React.TouchEvent<any>) => void;\n\n    /**\n     * Обработчик, вызываемый перед началом ввода в маскированное поле\n     */\n    onProcessMaskInputEvent?: (event?: React.ChangeEvent<any>) => void;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    'data-test-id'?: string;\n};\n\ntype InputState = {\n    /**\n     * Состояние фокуса в поле\n     */\n    focused: boolean;\n\n    /**\n     * Ошибка\n     */\n    error: InputProps['error'] | null;\n\n    /**\n     * Содержимое поля ввода\n     */\n    value: string;\n}\n\n/**\n * Компонент текстового поля ввода.\n */\nexport class Input extends React.PureComponent<InputProps, InputState> {\n    protected cn = createCn('input');\n\n    static defaultProps: Partial<InputProps> = {\n        formNoValidate: false,\n        size: 'm',\n        type: 'text',\n        view: 'default',\n        resetError: true,\n    };\n\n    componentDidUpdate(prevProps: InputProps) {\n        if (prevProps.error !== this.props.error) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({ error: this.props.error });\n        }\n    }\n\n    state = {\n        focused: false,\n        error: this.props.error || null,\n        value: this.props.defaultValue || '',\n    };\n\n    /**\n     * @type {HTMLSpanElement}\n     */\n    private root;\n\n    /**\n     * @type {HTMLSpanElement}\n     */\n    private box;\n\n    /**\n     * @type {HTMLInputElement}\n     */\n    private control;\n\n    render() {\n        const hasAddons = !!this.props.rightAddons || !!this.props.leftAddons;\n        const hasLeftAddons = !!this.props.leftAddons;\n        const value = this.props.value === undefined ? this.state.value : this.props.value;\n        const focused = this.getFocused();\n\n        return (\n            <span\n                className={ this.cn({\n                    type: this.props.type,\n                    view: this.props.view,\n                    disabled: this.props.disabled,\n                    focused,\n                    size: this.props.size,\n                    width: this.props.width,\n                    'has-addons': hasAddons,\n                    'has-left-addons': hasLeftAddons,\n                    'has-clear': !!this.props.clear,\n                    'has-icon': !!this.props.icon,\n                    'has-label': !!this.props.label,\n                    'has-value': !!value,\n                    invalid: !!this.state.error,\n                }) }\n                ref={ (root) => {\n                    this.root = root;\n                } }\n                data-test-id={ this.props['data-test-id'] }\n            >\n                <span className={ this.cn('inner') }>\n                    { this.renderContent() }\n                    {\n                        (this.state.error || this.props.hint)\n                        && (\n                            <span className={ this.cn('sub') }>\n                                { this.state.error || this.props.hint }\n                            </span>\n                        )\n                    }\n                </span>\n            </span>\n        );\n    }\n\n    renderContent() {\n        const isMaskedInput = this.props.mask !== undefined;\n        const value = this.props.value === undefined ? this.state.value : this.props.value;\n\n        const inputProps = {\n            className: this.cn('control'),\n            type: this.props.type,\n            view: this.props.view,\n            formNoValidate: this.props.formNoValidate,\n            autoComplete: this.getAutoCompleteValue(),\n            disabled: this.props.disabled || this.props.disabledAttr,\n            maxLength: this.props.maxLength,\n            id: this.props.id,\n            name: this.props.name,\n            value,\n            tabIndex: this.props.tabIndex,\n            placeholder: this.props.placeholder,\n            pattern: this.props.pattern,\n            ref: (control) => {\n                setRef(this.props.inputRef, control);\n                this.control = control;\n            },\n            title: this.props.title,\n            onChange: this.handleChange,\n            onFocus: this.handleFocus,\n            onClick: this.handleClick,\n            onBlur: this.handleBlur,\n            onKeyDown: this.handleKeyDown,\n            onKeyUp: this.handleKeyUp,\n            onPaste: this.handlePaste,\n            onTouchStart: this.handleTouchStart,\n            onTouchEnd: this.handleTouchEnd,\n            onTouchMove: this.handleTouchMove,\n            onTouchCancel: this.handleTouchCancel,\n        };\n\n        return (\n            <span\n                className={ this.cn('box') }\n                key=\"input-wrapper\"\n                ref={ (box) => {\n                    this.box = box;\n                } }\n            >\n                {\n                    this.props.leftAddons\n                    && (\n                        <span className={ this.cn('addons', { left: true }) } key=\"left-addons\">\n                            { this.props.leftAddons }\n                        </span>\n                    )\n                }\n                <span className={ this.cn('input-wrapper')}>\n                    {\n                        !!this.props.label\n                        && (\n                            <span className={ this.cn('top') }>\n                                { this.props.label }\n                            </span>\n                        )\n                    }\n                    {\n                        isMaskedInput\n                            ? (\n                                <MaskedInput\n                                    { ...inputProps }\n                                    mask={ this.props.mask }\n                                    formatCharacters={ this.props.maskFormatCharacters }\n                                    onProcessInputEvent={ this.props.onProcessMaskInputEvent }\n                                    useWhitespaces={ this.props.useWhitespacesInMask }\n                                />\n                            )\n                            : <input { ...inputProps } />\n                    }\n                </span>\n                {\n                    this.props.clear && value\n                    && (\n                        <IconButton\n                            className={ this.cn('clear') }\n                            size={ this.props.size }\n                            tabIndex={ -1 }\n                            onClick={ this.handleClearClick }\n                        >\n                            <IconClose\n                                size={ this.props.size }\n                            />\n                        </IconButton>\n                    )\n                }\n                {\n                    this.props.icon\n                    && (\n                        <div className={ this.cn('icon') }>\n                            { this.props.icon }\n                        </div>\n                    )\n                }\n                {\n                    this.props.rightAddons\n                    && (\n                        <span className={ this.cn('addons', { right: true }) } key=\"right-addons\">\n                            { this.props.rightAddons }\n                        </span>\n                    )\n                }\n            </span>\n        );\n    }\n\n    private handleFocus = (event) => {\n        this.setState({ focused: true });\n        this.enableMouseWheel();\n        this.resetError();\n\n        if (this.props.onFocus) {\n            this.props.onFocus(event);\n        }\n    };\n\n    private handleClick = (event) => {\n        if (this.props.onClick) {\n            this.props.onClick(event);\n        }\n    };\n\n    private handleBlur = (event) => {\n        this.setState({ focused: false });\n        this.disableMouseWheel();\n\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n    };\n\n    private handleChange = (event) => {\n        this.changeValue(event.target.value, event);\n    };\n\n    private handleClearClick = (event) => {\n        this.changeValue('', event);\n\n        if (this.props.onClearClick) {\n            this.props.onClearClick(event);\n        }\n\n        this.focus();\n    };\n\n    private handleKeyDown = (event) => {\n        if (this.props.onKeyDown) {\n            this.props.onKeyDown(event);\n        }\n    };\n\n    private handleKeyUp = (event) => {\n        if (this.props.onKeyUp) {\n            this.props.onKeyUp(event);\n        }\n    };\n\n    private handlePaste = (event) => {\n        if (this.props.onPaste) {\n            this.props.onPaste(event);\n        }\n    };\n\n    private handleTouchStart = (event) => {\n        if (this.props.onTouchStart) {\n            this.props.onTouchStart(event);\n        }\n    };\n\n    private handleTouchEnd = (event) => {\n        if (this.props.onTouchEnd) {\n            this.props.onTouchEnd(event);\n        }\n    };\n\n    private handleTouchMove = (event) => {\n        if (this.props.onTouchMove) {\n            this.props.onTouchMove(event);\n        }\n    };\n\n    private handleTouchCancel = (event) => {\n        if (this.props.onTouchCancel) {\n            this.props.onTouchCancel(event);\n        }\n    };\n\n    private getAutoCompleteValue() {\n        if (typeof this.props.autocomplete === 'string') {\n            return this.props.autocomplete;\n        }\n\n        return this.props.autocomplete === false ? 'off' : 'on';\n    }\n\n    /**\n     * Разблокирует возможность скролла в поле ввода\n     *\n     */\n    public enableMouseWheel() {\n        const input = this.control instanceof MaskedInput ? this.control.input : this.control;\n\n        if (input) {\n            input.onwheel = () => true;\n        }\n    }\n\n    /**\n     * Блокирует возможность скролла в поле ввода\n     */\n    public disableMouseWheel() {\n        const input = this.control instanceof MaskedInput ? this.control.getControl() : this.control;\n\n        if (input) {\n            input.onwheel = () => false;\n        }\n    }\n\n    /**\n     * Возвращает корневой `HTMLElement` компонента.\n     */\n    public getNode() {\n        return this.root;\n    }\n\n    /**\n     * Возвращает ссылку на инстанс контейнера для контрола.\n     */\n    public getBoxNode() {\n        return this.box;\n    }\n\n    /**\n     * Возвращает ссылку на HTMLElement инпута.\n     */\n    public getControl(): HTMLInputElement {\n        if (this.props.mask !== undefined) {\n            return this.control.getControl();\n        }\n\n        return this.control;\n    }\n\n    /**\n     * Возвращает ссылку на инстанс MaskedInput.\n     * Если маска не была установлена, возвращает null.\n     */\n    public getMaskedInputInstance(): MaskedInput|null {\n        if (this.props.mask !== undefined) {\n            return this.control;\n        }\n\n        return null;\n    }\n\n    /**\n     * Устанавливает фокус на поле ввода.\n     */\n    public focus() {\n        this.control.focus();\n        this.setSelectionRange(this.getControl().value.length);\n    }\n\n    /**\n     * Убирает фокус с поля ввода.\n     */\n    // eslint-disable-next-line class-methods-use-this\n    public blur() {\n        if (document.activeElement instanceof HTMLElement) {\n            document.activeElement.blur();\n        }\n    }\n\n    /**\n     * Скроллит страницу до поля ввода.\n     */\n    public scrollTo() {\n        scrollTo({\n            targetY: (this.root.getBoundingClientRect().top + window.pageYOffset) - SCROLL_TO_CORRECTION,\n        });\n    }\n\n    /**\n     * Устанавливает начальное и конечное положение выделения текста в элементе.\n     * @param start Индекс первого выделенного символа.\n     * @param end Индекс символа после последнего выделенного символа.\n     */\n    public setSelectionRange(start = 0, end = this.getControl().value.length) {\n        if (this.props.type !== 'email') {\n            this.getControl().setSelectionRange(start, end);\n        }\n    }\n\n    /**\n     * Изменяет текущение значение поля ввода и генерирует событие об этом.\n     *\n     * @param value Новое значение\n     * @param event React SyntheticEvent\n     */\n    public changeValue(value: string, event: React.ChangeEvent) {\n        if (this.props.value === undefined) {\n            this.setState({ value });\n        }\n\n        if (this.props.onChange) {\n            this.props.onChange(value, event);\n        }\n    }\n\n    /**\n     * Возвращает состояние фокуса.\n     */\n    private getFocused() {\n        return this.props.focused === undefined ? this.state.focused : this.props.focused;\n    }\n\n    /**\n     * Сбрасывает состояние ошибки.\n     */\n    private resetError() {\n        if (this.props.resetError) {\n            this.setState({\n                error: null,\n            });\n        }\n    }\n}\n\nexport default withTheme<InputProps, Input>(Input);\n"]}