"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var match_media_1 = require("../lib/match-media");
var utils_1 = require("./utils");
var IS_BROWSER = typeof window !== 'undefined';
var SUPPORTS_TOUCH = IS_BROWSER && (utils_1.isPointerEventsSupported() || utils_1.isTouchSupported());
/**
 * Компонент, имплементирующий поддержку медиа запросов в шаблонах.
 * Рендерит внутренние компоненты/разметку исходя из соответствия условиям запроса.
 * Для `query` используется window.matchMedia с полифиллом для IE9.
 * Можно использовать кастомные запросы из `src/mq/mq.json`, например `--small`.
 * Пока браузеры не поддерживают CSS4 Media Queries, поддержка тач-событий определяется через `touch`.
 */
var Mq = /** @class */ (function (_super) {
    __extends(Mq, _super);
    function Mq() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            isMatched: false,
        };
        _this.mql = null;
        _this.handleMatch = function (mql) {
            var queryPass = true;
            var touchPass = true;
            if (_this.props.query) {
                queryPass = mql.matches;
            }
            if (_this.props.touch) {
                touchPass = SUPPORTS_TOUCH;
            }
            else if (_this.props.touch === false) {
                touchPass = !SUPPORTS_TOUCH;
            }
            _this.setState({
                isMatched: (queryPass && touchPass),
            }, function () {
                if (_this.props.onMatchChange) {
                    _this.props.onMatchChange(_this.state.isMatched);
                }
            });
        };
        return _this;
    }
    Mq.prototype.componentDidMount = function () {
        this.mql = match_media_1.getMatchMedia(this.props.query);
        this.mql.addListener(this.handleMatch);
        this.handleMatch(this.mql);
    };
    Mq.prototype.componentWillUnmount = function () {
        match_media_1.releaseMatchMedia(this.props.query);
        this.mql.removeListener(this.handleMatch);
        this.mql = null;
    };
    Mq.prototype.render = function () {
        if (!this.props.children || !IS_BROWSER || !this.state.isMatched) {
            return false;
        }
        return this.props.children;
    };
    return Mq;
}(react_1.default.Component));
exports.default = Mq;

//# sourceMappingURL=mq.js.map
