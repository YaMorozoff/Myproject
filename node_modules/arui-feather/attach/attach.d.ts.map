{"version":3,"sources":["attach/attach.tsx"],"names":[],"mappings":"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","file":"attach.d.ts","sourcesContent":["/* eslint-disable jsx-a11y/control-has-associated-label */\n/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport React from 'react';\nimport { createCn } from 'bem-react-classname';\nimport { withTheme } from '../cn';\n\nimport Button, { ButtonProps } from '../button/button';\nimport IconAttachment from '../icon/action/attachment';\nimport ProgressBar from '../progress-bar';\n\nconst MULTIPLE_TEXTS = ['файл', 'файла', 'файлов'];\n\n/**\n * Возвращает слово в нужном склонении.\n *\n * @param number Количество\n * @param endingList Варианты слов, например: 'день', 'дня', 'дней'\n */\nfunction getDeclension(number: number, endingList: string[]): string {\n    let endingIndex: number;\n\n    number %= 100;\n\n    if (number >= 11 && number <= 19) {\n        endingIndex = 2;\n    } else {\n        switch (number % 10) {\n        case 1:\n            endingIndex = 0;\n            break;\n        case 2:\n        case 3:\n        case 4:\n            endingIndex = 1;\n            break;\n        default:\n            endingIndex = 2;\n        }\n    }\n\n    return endingList[endingIndex];\n}\n\n/**\n * Производит поэлементное сравнение массивов.\n *\n * @param array1 Первый массив\n * @param array2 Второй массив\n */\nfunction isEqualArray(array1: unknown[], array2: unknown[]): boolean {\n    if (array1 === array2) {\n        return true;\n    }\n\n    return array1\n        && array2\n        && array1.length === array2.length\n        && array1.every((item, index) => item === array2[index]);\n}\n\nfunction isEmptyArray(value: unknown) {\n    return Array.isArray(value) && !value.length;\n}\n\nexport type AttachProps = {\n\n    /**\n     * Содержимое поля ввода, указанное по умолчанию. Принимает массив объектов типа File или null.\n     */\n    value?: File[];\n\n    /**\n     * Уникальное имя блока\n     */\n    name?: string;\n\n    /**\n     * Идентификатор компонента в DOM\n     */\n    id?: string;\n\n    /**\n     * Иконка\n     */\n    icon?: React.ReactNode;\n\n    /**\n     * Последовательность перехода между контролами при нажатии на Tab\n     */\n    tabIndex?: number;\n\n    /**\n     * Текст для случая, когда файл не загружен\n     */\n    noFileText?: string;\n\n    /**\n     * Содержимое кнопки для выбора файла\n     */\n    buttonContent?: React.ReactNode;\n\n    /**\n     * Свойства для кнопки\n     */\n    buttonProps?: ButtonProps;\n\n    /**\n     * Доступные для выбора MIME типы файлов\n     */\n    accept?: string;\n\n    /**\n     * Управление возможностью изменения значения компонента\n     */\n    disabled?: boolean;\n\n    /**\n     * Управление возможностью выбора нескольких файлов\n     */\n    multiple?: boolean;\n\n    /**\n     * Процент выполнения загрузки файла\n     */\n    progressBarPercent?: number;\n\n    /**\n     * Число символов, после которого имя файла будет обрезаться\n     */\n    maxFilenameLength?: number;\n\n    /**\n     * Размер компонента\n     */\n    size?: 's' | 'm' | 'l' | 'xl';\n\n    /**\n     * Тема компонента\n     */\n    theme?: 'alfa-on-color' | 'alfa-on-white';\n\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Обработчик клика по компоненту кнопки\n     */\n    onClick?: (event?: React.MouseEvent<unknown>) => void;\n\n    /**\n     * Обработчик изменения значения 'value'\n     */\n    onChange?: (value?: unknown[], event?: React.ChangeEvent<unknown>) => void;\n\n    /**\n     * Обработчик фокуса компонента\n     */\n    onFocus?: (event?: React.FocusEvent<unknown>) => void;\n\n    /**\n     * Обработчик снятия фокуса компонента\n     */\n    onBlur?: (event?: React.FocusEvent<unknown>) => void;\n\n    /**\n     * Обработчик события наведения курсора на кнопку\n     */\n    onMouseEnter?: (event?: React.MouseEvent<unknown>) => void;\n\n    /**\n     * Обработчик события снятия курсора с кнопки\n     */\n    onMouseLeave?: (event?: React.MouseEvent<unknown>) => void;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    'data-test-id'?: string;\n\n};\n\ntype AttachState = {\n    focused: boolean;\n    hovered: boolean;\n    value: File[];\n};\n\n/**\n * Компонент прикрепления файлов.\n */\nexport class Attach extends React.PureComponent<AttachProps, AttachState> {\n    protected cn = createCn('attach');\n\n    static defaultProps: Partial<AttachProps> = {\n        buttonContent: 'Выберите файл',\n        size: 'm',\n        disabled: false,\n        multiple: false,\n        tabIndex: 0,\n        noFileText: 'Нет файла',\n    };\n\n    state: AttachState = {\n        focused: false,\n        hovered: false,\n        value: [],\n    };\n\n    private input: HTMLInputElement;\n\n    static getDerivedStateFromProps(nextProps: AttachProps, prevState: AttachState) {\n        const nextValue = nextProps.value || [];\n\n        if (\n            !isEmptyArray(nextValue)\n            && !isEqualArray(nextValue as unknown[], prevState.value)\n        ) {\n            return {\n                value: nextValue,\n            };\n        }\n\n        return null;\n    }\n\n    componentDidUpdate(_: AttachProps, prevState: AttachState) {\n        const nextValue = this.props.value || [];\n\n        if (!isEqualArray(nextValue as unknown[], prevState.value)) {\n            this.input.value = '';\n        }\n    }\n\n    render() {\n        return (\n            <span\n                className={ this.cn({\n                    size: this.props.size,\n                    disabled: this.props.disabled,\n                    hovered: this.state.hovered,\n                    focused: this.state.focused,\n                }) }\n                onMouseEnter={ this.handleMouseEnter }\n                onMouseLeave={ this.handleMouseLeave }\n                data-test-id={ this.props['data-test-id'] }\n            >\n                { this.renderButton() }\n                { this.renderStatusText() }\n            </span>\n        );\n    }\n\n    renderButton() {\n        const buttonProps = {\n            ...this.props.buttonProps,\n            className: this.cn('button'),\n            disabled: this.props.disabled,\n            size: this.props.size,\n            icon: this.props.icon ? this.props.icon : <IconAttachment size={ this.props.size } />,\n            focused: this.state.focused,\n        };\n\n        return (\n            <Button\n                { ...buttonProps }\n                tag=\"span\"\n                leftAddons={ (\n                    <label\n                        className={ this.cn('label') }\n                        htmlFor={ this.props.id }\n                    >\n                        <input\n                            ref={ (input) => {\n                                this.input = input;\n                            } }\n                            className={ this.cn('control') }\n                            accept={ this.props.accept }\n                            disabled={ this.props.disabled }\n                            id={ this.props.id }\n                            multiple={ this.props.multiple }\n                            name={ this.props.name }\n                            tabIndex={ -1 }\n                            type=\"file\"\n                            onChange={ this.handleInputChange }\n                        />\n                    </label>\n                ) }\n                tabIndex={ this.props.tabIndex }\n                onClick={ this.handleButtonClick }\n                onFocus={ this.handleFocus }\n                onBlur={ this.handleBlur }\n            >\n                { this.props.buttonContent }\n            </Button>\n        );\n    }\n\n    renderStatusText() {\n        const files = this.props.value === undefined ? this.state.value : (this.props.value || []);\n\n        if (files && files.length > 0) {\n            const content = (files.length === 1)\n                ? this.truncateFilename(files[0].name)\n                : (\n                    <abbr\n                        title={ files.map((file) => file.name).join() }\n                    >\n                        { files.length }\n                        { ' ' }\n                        { getDeclension(files.length, MULTIPLE_TEXTS) }\n                    </abbr>\n                );\n\n            return (\n                <span className={ this.cn('file') }>\n                    <span className={ this.cn('text') }>\n                        { content }\n                    </span>\n                    <button\n                        type=\"button\"\n                        className={ this.cn('clear') }\n                        onClick={ this.handleClearClick }\n                    />\n                    { typeof this.props.progressBarPercent !== 'undefined' && (\n                        <ProgressBar\n                            percent={ this.props.progressBarPercent }\n                            className={ this.cn('progress-bar') }\n                        />\n                    ) }\n                </span>\n            );\n        }\n\n        return (\n            <span className={ this.cn('no-file') }>\n                { this.props.noFileText }\n            </span>\n        );\n    }\n\n    private truncateFilename = (filename: string): string => {\n        const { maxFilenameLength } = this.props;\n\n        if (maxFilenameLength && filename.length > maxFilenameLength) {\n            const lengthOfPart: number = Math.round(maxFilenameLength / 2) - 1;\n\n            return `${filename.substr(0, lengthOfPart)}…${filename.substr(filename.length - lengthOfPart)}`;\n        }\n\n        return filename;\n    };\n\n    private handleInputChange = (event) => {\n        this.performChange(Array.from(event.target.files), event);\n    };\n\n    private handleClearClick = (event) => {\n        this.input.value = '';\n        this.performChange([], event);\n    };\n\n    private handleButtonClick = (event) => {\n        if (this.props.onClick) {\n            this.props.onClick(event);\n        }\n    };\n\n    private handleFocus = (event) => {\n        this.setState({ focused: true });\n\n        if (this.props.onFocus) {\n            this.props.onFocus(event);\n        }\n    };\n\n    private handleBlur = (event) => {\n        this.setState({ focused: false });\n\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n    };\n\n    private handleMouseEnter = (event) => {\n        this.setState({ hovered: true });\n\n        if (this.props.onMouseEnter) {\n            this.props.onMouseEnter(event);\n        }\n    };\n\n    private handleMouseLeave = (event) => {\n        this.setState({ hovered: false });\n\n        if (this.props.onMouseLeave) {\n            this.props.onMouseLeave(event);\n        }\n    };\n\n    /**\n     * Ставит фокус на контрол.\n     */\n    public focus() {\n        this.input.focus();\n    }\n\n    /**\n     * Убирает фокус с контрола.\n     */\n    public blur() {\n        this.input.blur();\n    }\n\n    private performChange(value, event) {\n        const shouldFireChange = !isEqualArray(value, this.state.value);\n\n        this.setState({ value }, () => {\n            if (this.props.onChange && shouldFireChange) {\n                this.props.onChange(value.length ? value : null, event);\n            }\n        });\n    }\n}\n\nexport default withTheme<AttachProps, Attach>(Attach);\n"]}