{"version":3,"sources":["grid-row/grid-row.tsx"],"names":[],"mappings":"AAIA,OAAO,KAA+C,MAAM,OAAO,CAAC;AAGpE,aAAK,iBAAiB,GAAG;IACrB,MAAM,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;IAClC,MAAM,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;IAClC,OAAO,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;CACtC,CAAC;AAEF,oBAAY,YAAY,GAAG;IAEvB;;OAEG;IACH,EAAE,CAAC,EAAE,MAAM,CAAC;IAEZ;;OAEG;IACH,SAAS,CAAC,EAAE,MAAM,CAAC;IAEnB;;;;;;;OAOG;IACH,MAAM,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,iBAAiB,CAAC;IAE7C;;OAEG;IACH,KAAK,CAAC,EAAE,KAAK,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAEpC;;OAEG;IACH,OAAO,CAAC,EAAE,MAAM,GAAG,QAAQ,GAAG,OAAO,GAAG,QAAQ,GAAG,SAAS,CAAC;IAE7D;;;;;OAKG;IACH,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,iBAAiB,CAAC;IAElC;;OAEG;IACH,QAAQ,CAAC,EAAE,KAAK,CAAC,SAAS,CAAC;IAE3B;;OAEG;IACH,cAAc,CAAC,EAAE,MAAM,CAAC;CAE3B,CAAC;AAEF;;;GAGG;AACH,qBAAa,OAAQ,SAAQ,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC;IAC1D,SAAS,CAAC,EAAE;;;;;;iBAAwB;IAEpC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,YAAY,CAAC,CAWzC;IAED;;OAEG;IACH,OAAO,CAAC,QAAQ,CAAa;IAE7B,MAAM;IA8CN;;;;;OAKG;IACH,OAAO,CAAC,gCAAgC;CAkB3C;AAED,eAAe,OAAO,CAAC","file":"grid-row.d.ts","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport React, { Children, cloneElement, ReactElement } from 'react';\nimport { createCn } from 'bem-react-classname';\n\ntype GridRowGutterType = {\n    mobile?: string | number | object;\n    tablet?: string | number | object;\n    desktop?: string | number | object;\n};\n\nexport type GridRowProps = {\n\n    /**\n     * Уникальный идентификатор блока\n     */\n    id?: string;\n\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Горизонтальный отступ между колонками.\n     * Возможные значения: `8n` px (n - натуральное число) из диапазона `[0, 8, 16, 24]`\n     * или `{ mobile: [0..24], tablet: [0..24], desktop: [0..24] }`\n     * или `{ mobile: { s: [0..24], m: [0..24], l: [0..24] },\n     * tablet: { s: [0..24], m: [0..24] },\n     * desktop: { s: [0..24], m: [0..24], l: [0..24], xl: [0..24] } }`.\n     */\n    gutter?: string | number | GridRowGutterType;\n\n    /**\n     * Управление выравниванием колонок по вертикальной оси\n     */\n    align?: 'top' | 'middle' | 'bottom';\n\n    /**\n     * Управление выравниванием колонок по горизонтальной оси\n     */\n    justify?: 'left' | 'center' | 'right' | 'around' | 'between';\n\n    /**\n     * Html тег компонента.\n     * Из-за <a href=\"https://github.com/philipwalton/flexbugs#flexbug-9\" target=\"_blank\">ограничений и багов</a>,\n     * существующих во флексбоксах, невозможно использовать\n     * некоторые элементы HTML как flex-контейнеры</a>.\n     */\n    tag?: keyof JSX.IntrinsicElements;\n\n    /**\n     * Дочерние элементы `GridRow`\n     */\n    children?: React.ReactNode;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    'data-test-id'?: string;\n\n};\n\n/**\n * Строка используется для создания сетки.\n * Сетка имеет резиновую систему разметки, которая масштабируется до 12 столбцов.\n */\nexport class GridRow extends React.PureComponent<GridRowProps> {\n    protected cn = createCn('grid-row');\n\n    static defaultProps: Partial<GridRowProps> = {\n        tag: 'div',\n        gutter: {\n            mobile: {\n                s: 16,\n            },\n            desktop: {\n                m: 24,\n            },\n        },\n        justify: 'between',\n    }\n\n    /**\n     * Класс колонки\n     */\n    private classCol = 'grid-col'\n\n    render() {\n        const {\n            tag: Tag,\n            gutter,\n            align,\n            justify,\n            children,\n            ...props\n        } = this.props;\n\n        let gutters = {};\n\n        if (typeof gutter === 'object') {\n            Object.keys(gutter).forEach((breakpoint) => {\n                if (gutter[breakpoint] === null) {\n                    return;\n                }\n                if (typeof gutter[breakpoint] === 'object') {\n                    Object.keys(gutter[breakpoint]).forEach((size) => {\n                        if (gutter[breakpoint][size] === null) {\n                            return;\n                        }\n                        gutters[`gutter-${breakpoint}-${size}`] = gutter[breakpoint][size].toString();\n                    });\n                } else {\n                    gutters[`gutter-${breakpoint}`] = gutter[breakpoint].toString();\n                }\n            });\n        } else {\n            gutters = { gutter };\n        }\n\n        return (\n            <Tag\n                { ...props }\n                className={ this.cn({\n                    ...gutters,\n                    align,\n                    justify,\n                }) }\n            >\n                { this.injectGutterClassNamesToChildren(gutters, children as ReactElement) }\n            </Tag>\n        );\n    }\n\n    /**\n     * Добавляет модификаторы горизонтальных отступов в дочерний элемент.\n     *\n     * @param gutters Модификаторы горизонтальных отступов\n     * @param children Дочерние элементы компонента.\n     */\n    private injectGutterClassNamesToChildren(gutters: object, children: React.ReactElement) {\n        return (\n            Children.map(children, (col) => {\n                if (!col) {\n                    return null;\n                }\n                if (!col.props) {\n                    return col;\n                }\n                const gutterClassNames = Object.keys(gutters).map(\n                    (gutter) => `${this.classCol}_${gutter}_${gutters[gutter]}`,\n                );\n                const classNameFromProps = col.props.className ? ` ${col.props.className}` : '';\n\n                return cloneElement(col, { className: `${gutterClassNames.join(' ')}${classNameFromProps}` });\n            })\n        );\n    }\n}\n\nexport default GridRow;\n"]}