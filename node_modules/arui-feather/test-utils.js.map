{"version":3,"sources":["test-utils.ts"],"names":[],"mappings":";AAAA;;8DAE8D;;;;;AAO9D,wDAAiC;AACjC,oEAA2D;AAE3D,sCAAsC;AACtC,OAAO,CAAC,IAAI,CAAC,sEAAsE,CAAC,CAAC;AAwBrF,IAAI,eAA4B,CAAC;AAEjC;;;;;;;GAOG;AACH,SAAgB,MAAM,CAAC,OAA2B,EAAE,OAAqB;IAArB,wBAAA,EAAA,YAAqB;IAC/D,IAAA,6BAAS,CAAa;IAE5B,IAAI,CAAC,SAAS,EAAE;QACZ,IAAI,CAAC,eAAe,EAAE;YAClB,eAAe,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAChD,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,CAAC;SAC9C;QACD,SAAS,GAAG,eAAe,CAAC;KAC/B;IAED,IAAM,QAAQ,GAAG,mBAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IAErD,IAAI,CAAC,QAAQ,EAAE;QACX,OAAO,IAAI,CAAC;KACf;IAED,OAAO;QACH,QAAQ,UAAA;QACR,IAAI,EAAE,mBAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC;QACpC,SAAS,WAAA;KACZ,CAAC;AACN,CAAC;AAtBD,wBAsBC;AAED;;GAEG;AACH,SAAgB,OAAO;IACnB,IAAI,eAAe,EAAE;QACjB,eAAe,GAAG,IAAI,CAAC;KAC1B;IAED,OAAO,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QACxC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KACvD;AACL,CAAC;AARD,0BAQC;AAED;;;;;;GAMG;AACH,SAAgB,QAAQ,CAAC,IAAiB,EAAE,SAAgC,EAAE,SAAuC;IACjH,oBAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;AACnD,CAAC;AAFD,4BAEC;AAED;;;;GAIG;AACH,SAAgB,YAAY,CAAC,KAA2B;IACpD,IAAI,KAAK,CAAC,OAAO,EAAE;QACf,KAAK,CAAC,OAAO,EAAE,CAAC;KACnB;AACL,CAAC;AAJD,oCAIC","file":"test-utils.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/* eslint import/no-extraneous-dependencies: [2, {\"devDependencies\": true}] */\n/* eslint react/no-render-return-value: 0 */\n/* eslint react/no-find-dom-node: 0 */\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport TestUtils, { Simulate } from 'react-dom/test-utils';\n\n// eslint-disable-next-line no-console\nconsole.warn('arui-feather/test-utils is deprecated. Use `jest` + `enzyme` instead');\n\ntype TestWrapper = {\n    /**\n     * Ссылка на экземпляр React компонента.\n     */\n    instance: Element | React.Component;\n    /**\n     * Корневой HTML узел компонента.\n     */\n    node: Element | Text;\n    /**\n     * HTML узел контейнера, в котором отрендерен компонент.\n     */\n    container: HTMLElement;\n};\n\ntype Options = {\n    /**\n     * Контейнер, в который нарендерить компонент.\n     */\n    container?: HTMLElement;\n};\n\nlet sharedContainer: HTMLElement;\n\n/**\n * Рендерит компонент в настоящий DOM, возвращает тестовую обертку.\n *\n * @param element JSX для рендера.\n * @param options Опции для рендера.\n *\n * @returns Тестовая обертка.\n */\nexport function render(element: React.ReactElement, options: Options = {}): TestWrapper {\n    let { container } = options;\n\n    if (!container) {\n        if (!sharedContainer) {\n            sharedContainer = document.createElement('div');\n            document.body.appendChild(sharedContainer);\n        }\n        container = sharedContainer;\n    }\n\n    const instance = ReactDOM.render(element, container);\n\n    if (!instance) {\n        return null;\n    }\n\n    return {\n        instance,\n        node: ReactDOM.findDOMNode(instance),\n        container,\n    };\n}\n\n/**\n * Очищает содержимое DOM после тестов.\n */\nexport function cleanUp() {\n    if (sharedContainer) {\n        sharedContainer = null;\n    }\n\n    while (document.body.childNodes.length > 0) {\n        document.body.removeChild(document.body.firstChild);\n    }\n}\n\n/**\n * Симулирует событие на HTML узле.\n *\n * @param node HTML узел, на котором необходимо сгенерить событие.\n * @param eventType Тип события.\n * @param eventData Данные для прокисрования в событие.\n */\nexport function simulate(node: HTMLElement, eventType: keyof typeof Simulate, eventData: TestUtils.SyntheticEventData) {\n    TestUtils.Simulate[eventType](node, eventData);\n}\n\n/**\n * Обеспечивает сохранение полей события в случае SyntheticEvent.\n *\n * @param event Synthetic event.\n */\nexport function eventPersist(event: React.SyntheticEvent) {\n    if (event.persist) {\n        event.persist();\n    }\n}\n"]}