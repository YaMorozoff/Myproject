{"version":3,"sources":["masked-input/mask.ts"],"names":[],"mappings":"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","file":"mask.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport InputMask from 'inputmask-core';\n\n// Стандартный плейсхолдер буквы равный по ширине цифровому символу.\nconst PLACEHOLDER_CHAR = '\\u2007';\n\n// Стандартные formatCharacters из inputmask-core.\nconst DIGIT_RE = /^\\d$/;\nconst LETTER_RE = /^[A-Za-z]$/;\nconst ALPHANNUMERIC_RE = /^[\\dA-Za-z]$/;\n\ntype CharFormatter = {\n    validate: (char: string) => boolean;\n    transform?: (char: string) => string;\n};\n\nexport type FormatCharacters = {\n    [key: string]: CharFormatter;\n};\n\nconst DEFAULT_FORMAT_CHARACTERS: FormatCharacters = {\n    '*': {\n        validate(char) {\n            return ALPHANNUMERIC_RE.test(char);\n        },\n    },\n    1: {\n        validate(char) {\n            return DIGIT_RE.test(char);\n        },\n    },\n    a: {\n        validate(char) {\n            return LETTER_RE.test(char);\n        },\n    },\n    A: {\n        validate(char) {\n            return LETTER_RE.test(char);\n        },\n        transform(char) {\n            return char.toUpperCase();\n        },\n    },\n    '#': {\n        validate(char) {\n            return ALPHANNUMERIC_RE.test(char);\n        },\n        transform(char) {\n            return char.toUpperCase();\n        },\n    },\n};\n\n/**\n * Класс маски. Позволяет форматировать строку по заданной маске.\n */\nclass Mask {\n    /**\n     * Длина маски.\n     */\n    length: number;\n\n    /**\n     * Индекс первого редактируемого символа.\n     */\n    firstEditableIndex: number;\n\n    /**\n     * Индекс последнего редактируемого символа.\n     */\n    lastEditableIndex: number;\n\n    // TODO: install InputMask typings\n    pattern: any;\n\n    /**\n     * Признак что пробелы удалять не надо\n     */\n    useWhitespaces: boolean;\n\n    /**\n     * @param mask Маска в формате: https://github.com/insin/inputmask-core\n     * @param formatCharacters Форматтеры маски в формате `inputmask-core`\n     */\n    constructor(mask: string, formatCharacters?: FormatCharacters, useWhitespaces?: boolean) {\n        this.pattern = new InputMask.Pattern(\n            mask,\n            { ...DEFAULT_FORMAT_CHARACTERS, ...formatCharacters },\n            PLACEHOLDER_CHAR,\n        );\n\n        this.length = this.pattern.length;\n        this.firstEditableIndex = this.pattern.firstEditableIndex;\n        this.lastEditableIndex = this.pattern.lastEditableIndex;\n        this.useWhitespaces = useWhitespaces || false;\n    }\n\n    /**\n     * Проверяет является ли символ в заданном индексе редактируемым.\n     *\n     * @param index Индекс символа.\n     */\n    isEditableIndex(index: number) {\n        return this.pattern.isEditableIndex(index);\n    }\n\n    /**\n     * Форматирует значение введенное в поле ввода по маске.\n     *\n     * @param value Неформатированное значение из поля ввода.\n     */\n    format(value: string) {\n        let formattedValue = '';\n\n        const cleanValue = this.useWhitespaces ? value : value.replace(/\\s+/g, '');\n        const cleanValueLength = cleanValue.length;\n        let cleanValueIndex = 0;\n        let cleanValueChar;\n\n        let patternIndex = 0;\n        let patternChar;\n        const patternLength = this.pattern.length;\n\n        while (patternIndex < patternLength && cleanValueIndex < cleanValueLength) {\n            if (this.pattern.isEditableIndex(patternIndex)) {\n                // eslint-disable-next-line no-cond-assign\n                while ((cleanValueChar = cleanValue.charAt(cleanValueIndex)) !== '') {\n                    if (this.pattern.isValidAtIndex(cleanValueChar, patternIndex)) {\n                        formattedValue += this.pattern.transform(cleanValueChar, patternIndex);\n                        patternIndex += 1;\n                        cleanValueIndex += 1;\n                        break;\n                    } else {\n                        cleanValueIndex += 1;\n                    }\n                }\n            } else {\n                patternChar = this.pattern.pattern[patternIndex];\n                formattedValue += patternChar;\n                patternIndex += 1;\n                if (cleanValue.charAt(cleanValueIndex) === patternChar) {\n                    cleanValueIndex += 1;\n                }\n            }\n        }\n\n        return formattedValue;\n    }\n}\n\nexport default Mask;\n"]}