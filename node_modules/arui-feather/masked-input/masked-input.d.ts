import React from 'react';
import { FormatCharacters } from './mask';
/**
 * Возвращает версию андроида в формате "4.2.1" или false, если не андроид.
 */
export declare function getAndroidVersion(): string | false;
export declare type MaskedInputProps = {
    /**
     * Маска для поля ввода, использует формат https://github.com/insin/inputmask-core
     */
    mask: string;
    /**
     * Кастомные форматтеры символов маски, использует формат formatCharacters из `inputmask-core`
     */
    formatCharacters?: FormatCharacters;
    /**
     * Максимальное число символов
     */
    maxLength?: number;
    /**
     * Обработчик, вызываемый перед началом ввода в поле
     */
    onProcessInputEvent?: (event?: React.ChangeEvent<any>) => void;
    /**
     * Признак что пробелы удалять не надо
     */
    useWhitespaces?: boolean;
    /**
     * Идентификатор для систем автоматизированного тестирования
     */
    'data-test-id'?: string;
    /**
     * Содержимое поля ввода
     */
    value?: string;
    /**
     * Обработчик события, вызываемый при событии 'change'
     */
    onChange?: (event?: React.ChangeEvent<any>) => void;
    /**
     * Обработчик события, вызываемый при событии 'input'
     */
    onInput?: (event?: React.ChangeEvent<any>) => void;
    /**
     * Обработчик события, вызываемый при событии 'beforeInput'
     */
    onBeforeInput?: (event?: React.FormEvent<any>) => void;
};
/**
 * Компонент поля ввода с поддержкой масок.
 * Расширяет стандартный <input /> React-а.
 */
declare class MaskedInput extends React.PureComponent<MaskedInputProps> {
    input: HTMLInputElement;
    private maskPattern;
    private mask;
    private beforeChangeMask;
    private formatCharacters;
    private value;
    private caretFixTimeout;
    private beforeInputSelection;
    UNSAFE_componentWillMount(): void;
    UNSAFE_componentWillReceiveProps(nextProps: any): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    private handleBeforeInput;
    /**
     * Обрабатывает событие «input».
     *
     * @param event The Event object
     */
    private handleInput;
    /**
     * Обрабатывает событие «change».
     *
     * @param event The Event object
     */
    private handleChange;
    /**
     * Устанавливает фокус на поле ввода.
     */
    focus(): void;
    /**
     * Снимает фокус с поля ввода.
     */
    blur(): void;
    /**
     * Возвращает ссылку на HTMLElement инпута.
     */
    getControl(): HTMLInputElement;
    /**
     * Синхронно обновляет маску на поле ввода.
     *
     * @param newMask Новая маска
     * @param formatCharacters Форматтер маски
     * @param useWhitespaces использовать в маске пробелы
     */
    setMask(newMask: string, formatCharacters: FormatCharacters, useWhitespaces?: boolean): void;
    private processInputEvent;
    /**
     * Возвращает положение каретки с учетом первого и последнего редактируемого символа маски.
     *
     * @param selection Положение каретки
     */
    private clampSelection;
    /**
     * Устанавливает каретку поля ввода в новую позицию.
     *
     * @param selection Новое положение каретки
     */
    private setInputSelection;
    /**
     * Устанавливает каретку поля ввода в заданную позицию асинхронно.
     *
     * Во-избежание дефекта с установкой каретки, наблюдаемом в мобильных браузерах, а так же
     * браузерах IE9-10, установка происходит асинхронно, с минимальной задержкой,
     * с помощью [setTimeout] обертки.
     *
     * @param selection Положение каретки
     */
    private setInputSelectionByTimeout;
}
export default MaskedInput;
