declare type CharFormatter = {
    validate: (char: string) => boolean;
    transform?: (char: string) => string;
};
export declare type FormatCharacters = {
    [key: string]: CharFormatter;
};
/**
 * Класс маски. Позволяет форматировать строку по заданной маске.
 */
declare class Mask {
    /**
     * Длина маски.
     */
    length: number;
    /**
     * Индекс первого редактируемого символа.
     */
    firstEditableIndex: number;
    /**
     * Индекс последнего редактируемого символа.
     */
    lastEditableIndex: number;
    pattern: any;
    /**
     * Признак что пробелы удалять не надо
     */
    useWhitespaces: boolean;
    /**
     * @param mask Маска в формате: https://github.com/insin/inputmask-core
     * @param formatCharacters Форматтеры маски в формате `inputmask-core`
     */
    constructor(mask: string, formatCharacters?: FormatCharacters, useWhitespaces?: boolean);
    /**
     * Проверяет является ли символ в заданном индексе редактируемым.
     *
     * @param index Индекс символа.
     */
    isEditableIndex(index: number): any;
    /**
     * Форматирует значение введенное в поле ввода по маске.
     *
     * @param value Неформатированное значение из поля ввода.
     */
    format(value: string): string;
}
export default Mask;
