{"version":3,"sources":["checkbox-group/checkbox-group.tsx"],"names":[],"mappings":"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","file":"checkbox-group.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport createFragment from 'react-addons-create-fragment';\nimport React from 'react';\nimport { createCn } from 'bem-react-classname';\nimport { withTheme } from '../cn';\n\nexport type CheckBoxGroupThemeFieldType = 'alfa-on-color' | 'alfa-on-white';\n\nexport type CheckBoxGroupProps = ({\n    /**\n     * Тип компонента\n     */\n    type: 'button';\n    /**\n     * Управление шириной группы кнопок для типа 'button'. При значении\n     * 'available' растягивает группу на ширину родителя\n     */\n    width?: 'default' | 'available';\n} | {\n    /**\n     * Тип компонента\n     */\n    type?: 'normal' | 'line';\n}) & {\n\n    /**\n     * Выбранные чекбокс-кнопки\n     */\n    value?: ReadonlyArray<string | number>;\n\n    /**\n     * Уникальное имя блока\n     */\n    name?: string;\n\n    /**\n     * Управление возможностью изменения состояния 'checked' дочерних компонентов `CheckBox`\n     */\n    disabled?: boolean;\n\n    /**\n     * Дочерние элементы `CheckBoxGroup`, как правило, компоненты `CheckBox`\n     */\n    children?: React.ReactNode;\n\n    /**\n     * Тема компонента\n     */\n    theme?: CheckBoxGroupThemeFieldType;\n\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Идентификатор компонента в DOM\n     */\n    id?: string;\n\n    /**\n     * Лейбл для группы\n     */\n    label?: React.ReactNode;\n\n    /**\n     * Обработчик фокуса радиогруппы\n     */\n    onFocus?: (event?: React.FocusEvent<any>) => void;\n\n    /**\n     * Обработчик снятия фокуса с радиогруппы\n     */\n    onBlur?: (event?: React.FocusEvent<any>) => void;\n\n    /**\n     * Обработчик изменения значения 'checked' одного из дочерних радио-кнопок\n     */\n    onChange?: (value?: any[], event?: React.ChangeEvent<any>) => void;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    'data-test-id'?: string;\n\n};\n\n/**\n * Компонент группы чекбоксов.\n */\nexport class CheckBoxGroup extends React.PureComponent<CheckBoxGroupProps> {\n    protected cn = createCn('checkbox-group');\n\n    static defaultProps: Partial<CheckBoxGroupProps> = {\n        type: 'normal',\n    };\n\n    state = {\n        value: [],\n    };\n\n    private checkboxes: any[];\n\n    render() {\n        let children: React.ReactNode = null;\n        let props: { name: string; disabled?: boolean; width?: 'default' | 'available' } = { name: this.props.name };\n        const checkboxGroupParts = {};\n\n        if (this.props.disabled !== undefined) {\n            props.disabled = this.props.disabled;\n        }\n\n        if (this.props.children) {\n            const { children: propsChildren } = this.props;\n\n            children = React.Children.toArray(propsChildren);\n        }\n\n        if (this.props.type === 'button') {\n            props = { ...props, width: this.props.width };\n        }\n\n        if (children) {\n            this.checkboxes = [];\n            const value = this.props.value === undefined ? this.state.value : this.props.value;\n\n            React.Children.forEach(children, (checkbox, index) => {\n                if (React.isValidElement(checkbox)) {\n                    const checkboxNode = React.cloneElement(checkbox, {\n                        ref: (checkbox) => this.checkboxes.push(checkbox),\n                        checked: checkbox.props.checked === undefined\n                            ? value.some((groupValue) => groupValue === checkbox.props.value)\n                            : checkbox.props.checked,\n                        onChange: checkbox.props.onChange === undefined\n                            ? (checked, _text, event) => this.handleCheckboxChange(checkbox.props.value, checked, event)\n                            : checkbox.props.onChange,\n                        ...props,\n                    });\n\n                    checkboxGroupParts[`checkbox-${index}`] = (this.props.type !== 'button' && this.props.type !== 'line')\n                        ? <div>{ checkboxNode }</div>\n                        : checkboxNode;\n                }\n            });\n        }\n\n        return (\n            <span\n                className={\n                    `${this.cn({\n                        type: this.props.type,\n                        disabled: props.disabled,\n                        width: props.width ? props.width : null,\n                    })} control-group`\n                }\n                id={ this.props.id }\n                role=\"group\"\n                tabIndex={ -1 }\n                onFocus={ this.handleFocus }\n                onBlur={ this.handleBlur }\n                data-test-id={ this.props['data-test-id'] }\n            >\n                {\n                    !!this.props.label\n                    && (\n                        <div className={ this.cn('label') }>\n                            { this.props.label }\n                        </div>\n                    )\n                }\n                <div className={ this.cn('box') }>\n                    { createFragment(checkboxGroupParts) }\n                </div>\n            </span>\n        );\n    }\n\n    private handleCheckboxChange = (value, checked, event) => {\n        // eslint-disable-next-line react/no-access-state-in-setstate\n        const newValue = this.props.value ? this.props.value.slice() : this.state.value.slice();\n        const changedValueIndex = newValue.findIndex((stateValue) => stateValue === value);\n\n        if (checked) {\n            newValue.push(value);\n        } else {\n            newValue.splice(changedValueIndex, 1);\n        }\n\n        this.setState({\n            value: newValue,\n        });\n\n        if (this.props.onChange) {\n            this.props.onChange(newValue, event);\n        }\n    };\n\n    private handleFocus = (event) => {\n        if (this.props.onFocus) {\n            this.props.onFocus(event);\n        }\n    };\n\n    private handleBlur = (event) => {\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n    };\n\n    /**\n     * Устанавливает фокус на первую чекбокс-кнопку в группе.\n     */\n    public focus() {\n        if (this.checkboxes && this.checkboxes[0]) {\n            this.checkboxes[0].focus();\n        }\n    }\n\n    /**\n     * Убирает фокус с группы чекбокс-кнопок.\n     */\n    // eslint-disable-next-line class-methods-use-this\n    public blur() {\n        if (document.activeElement instanceof HTMLElement) {\n            document.activeElement.blur();\n        }\n    }\n}\n\nexport default withTheme<CheckBoxGroupProps, CheckBoxGroup>(CheckBoxGroup);\n"]}