import React from 'react';
export declare type PopupContainerProviderProps = {
    /**
     * Дочерние элементы контейнера
     */
    children?: React.ReactNode;
    /**
     * Дополнительный класс
     */
    className?: string;
    /**
     * Идентификатор компонента в DOM
     */
    id?: string;
    /**
     * Объект со стилями
     */
    style?: any;
    /**
     * Тема компонента
     */
    theme?: 'alfa-on-color' | 'alfa-on-white';
    /**
     * Идентификатор для систем автоматизированного тестирования
     */
    'data-test-id'?: string;
};
declare type PopupContainerProviderState = {
    didRender: boolean;
};
/**
 * Становится родительским элементом для всех дочерних блоков `Popup`.
 * Предполагается задавать этому элементу `position: fixed` в стилях.
 *
 * @example
 * ```javascript
 * import PopupContainerProvider from 'arui-feather/popup-container-provider';
 * import Popup from 'arui-feather/popup';
 * import Page from 'arui-feather/page';
 *
 *  <Page>
 *     <PopupContainerProvider
 *         style={
 *             {
 *                 position: 'fixed',
 *                 top: 0,
 *                 right: 0,
 *                 bottom: 0,
 *                 width: '400px',
 *                 overflow: 'auto'
 *             }
 *         }
 *     >
 *         <Popup>
 *             Попап отрендерился в PopupContainerProvider, а не в body
 *             При скролле внутри блока, попап ездит вместе с остальным контентом.
 *         </Popup>
 *     </PopupContainerProvider>
 *  </Page>
 * ```
 */
declare class PopupContainerProvider extends React.PureComponent<PopupContainerProviderProps, PopupContainerProviderState> {
    protected cn: (this: void | {
        props?: Record<string, unknown>;
    }, elementNameOrMods?: string | {
        [key: string]: string | number | boolean;
    }, mods?: {
        [key: string]: string | number | boolean;
    }) => string;
    state: {
        didRender: boolean;
    };
    private renderContainer;
    private positioningContainer;
    static childContextTypes: import("prop-types").ValidationMap<unknown>;
    getChildContext(): {
        isInCustomContainer: boolean;
        renderContainerElement: HTMLDivElement;
        positioningContainerElement: HTMLElement;
    };
    componentDidMount(): void;
    render(): JSX.Element;
    /**
     * Необходимо для обновления childContext сразу после получения refs.
     */
    private handleContainerDidRender;
    /**
     * Возвращает корневой `HTMLElement` компонента.
     */
    getNode(): HTMLElement;
}
export default PopupContainerProvider;
