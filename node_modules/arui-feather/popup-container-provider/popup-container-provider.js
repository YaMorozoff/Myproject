"use strict";
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importDefault(require("react"));
var bem_react_classname_1 = require("bem-react-classname");
var isolated_container_1 = require("../isolated-container/isolated-container");
var popup_1 = require("../popup/popup");
/**
 * Становится родительским элементом для всех дочерних блоков `Popup`.
 * Предполагается задавать этому элементу `position: fixed` в стилях.
 *
 * @example
 * ```javascript
 * import PopupContainerProvider from 'arui-feather/popup-container-provider';
 * import Popup from 'arui-feather/popup';
 * import Page from 'arui-feather/page';
 *
 *  <Page>
 *     <PopupContainerProvider
 *         style={
 *             {
 *                 position: 'fixed',
 *                 top: 0,
 *                 right: 0,
 *                 bottom: 0,
 *                 width: '400px',
 *                 overflow: 'auto'
 *             }
 *         }
 *     >
 *         <Popup>
 *             Попап отрендерился в PopupContainerProvider, а не в body
 *             При скролле внутри блока, попап ездит вместе с остальным контентом.
 *         </Popup>
 *     </PopupContainerProvider>
 *  </Page>
 * ```
 */
var PopupContainerProvider = /** @class */ (function (_super) {
    __extends(PopupContainerProvider, _super);
    function PopupContainerProvider() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cn = bem_react_classname_1.createCn('popup-container');
        _this.state = {
            didRender: false,
        };
        return _this;
    }
    PopupContainerProvider.prototype.getChildContext = function () {
        return {
            isInCustomContainer: true,
            renderContainerElement: (this.renderContainer && this.renderContainer.getNode()),
            positioningContainerElement: this.positioningContainer,
        };
    };
    PopupContainerProvider.prototype.componentDidMount = function () {
        this.handleContainerDidRender();
    };
    PopupContainerProvider.prototype.render = function () {
        var _this = this;
        return (react_1.default.createElement("div", { className: this.cn(), id: this.props.id, ref: function (positioningContainer) {
                _this.positioningContainer = positioningContainer;
            }, style: this.props.style, "data-test-id": this.props['data-test-id'] },
            this.props.children,
            react_1.default.createElement(isolated_container_1.IsolatedContainer, { ref: function (renderContainer) {
                    _this.renderContainer = renderContainer;
                } })));
    };
    /**
     * Необходимо для обновления childContext сразу после получения refs.
     */
    PopupContainerProvider.prototype.handleContainerDidRender = function () {
        this.setState({
            didRender: true,
        });
    };
    /**
     * Возвращает корневой `HTMLElement` компонента.
     */
    PopupContainerProvider.prototype.getNode = function () {
        return this.positioningContainer;
    };
    PopupContainerProvider.childContextTypes = popup_1.popupContextTypes;
    return PopupContainerProvider;
}(react_1.default.PureComponent));
exports.default = PopupContainerProvider;

//# sourceMappingURL=popup-container-provider.js.map
