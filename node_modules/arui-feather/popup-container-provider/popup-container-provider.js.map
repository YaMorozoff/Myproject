{"version":3,"sources":["popup-container-provider/popup-container-provider.tsx"],"names":[],"mappings":";AAAA;;8DAE8D;;;;;;;;;;;;;;;;;;AAE9D,gDAA0B;AAC1B,2DAA+C;AAE/C,+EAA6E;AAC7E,wCAAmD;AAyCnD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8BG;AACH;IACI,0CAA6E;IADjF;QAAA,qEA8DC;QA5Da,QAAE,GAAG,8BAAQ,CAAC,iBAAiB,CAAC,CAAC;QAE3C,WAAK,GAAG;YACJ,SAAS,EAAE,KAAK;SACnB,CAAC;;IAwDN,CAAC;IAhDG,gDAAe,GAAf;QACI,OAAO;YACH,mBAAmB,EAAE,IAAI;YACzB,sBAAsB,EAAE,CAAC,IAAI,CAAC,eAAe,IAAI,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;YAChF,2BAA2B,EAAE,IAAI,CAAC,oBAAoB;SACzD,CAAC;IACN,CAAC;IAED,kDAAiB,GAAjB;QACI,IAAI,CAAC,wBAAwB,EAAE,CAAC;IACpC,CAAC;IAED,uCAAM,GAAN;QAAA,iBAmBC;QAlBG,OAAO,CACH,uCACI,SAAS,EAAG,IAAI,CAAC,EAAE,EAAE,EACrB,EAAE,EAAG,IAAI,CAAC,KAAK,CAAC,EAAE,EAClB,GAAG,EAAG,UAAC,oBAAoB;gBACvB,KAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;YACrD,CAAC,EACD,KAAK,EAAG,IAAI,CAAC,KAAK,CAAC,KAAK,kBACT,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC;YAEvC,IAAI,CAAC,KAAK,CAAC,QAAQ;YACrB,8BAAC,sCAAiB,IACd,GAAG,EAAG,UAAC,eAAe;oBAClB,KAAI,CAAC,eAAe,GAAG,eAAe,CAAC;gBAC3C,CAAC,GACH,CACA,CACT,CAAC;IACN,CAAC;IAED;;OAEG;IACK,yDAAwB,GAAhC;QACI,IAAI,CAAC,QAAQ,CAAC;YACV,SAAS,EAAE,IAAI;SAClB,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACI,wCAAO,GAAd;QACI,OAAO,IAAI,CAAC,oBAAoB,CAAC;IACrC,CAAC;IAjDM,wCAAiB,GAAG,yBAAiB,CAAC;IAkDjD,6BAAC;CA9DD,AA8DC,CA7DG,eAAK,CAAC,aAAa,GA6DtB;AAED,kBAAe,sBAAsB,CAAC","file":"popup-container-provider.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport React from 'react';\nimport { createCn } from 'bem-react-classname';\n\nimport { IsolatedContainer } from '../isolated-container/isolated-container';\nimport { popupContextTypes } from '../popup/popup';\n\nexport type PopupContainerProviderProps = {\n    /**\n     * Дочерние элементы контейнера\n     */\n    children?: React.ReactNode;\n\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Идентификатор компонента в DOM\n     */\n    id?: string;\n\n    /**\n     * Объект со стилями\n     */\n    style?: any/* Не нашёлся встроенный тип для типа {\"name\":\"custom\",\"raw\":\"styleType\",\"params\":[],\"returns\":null}\n                  * https://github.com/alfa-laboratory/library-utils/issues/new\n                  */;\n\n    /**\n     * Тема компонента\n     */\n    theme?: 'alfa-on-color' | 'alfa-on-white';\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    'data-test-id'?: string;\n\n};\n\ntype PopupContainerProviderState = {\n    didRender: boolean;\n}\n\n/**\n * Становится родительским элементом для всех дочерних блоков `Popup`.\n * Предполагается задавать этому элементу `position: fixed` в стилях.\n *\n * @example\n * ```javascript\n * import PopupContainerProvider from 'arui-feather/popup-container-provider';\n * import Popup from 'arui-feather/popup';\n * import Page from 'arui-feather/page';\n *\n *  <Page>\n *     <PopupContainerProvider\n *         style={\n *             {\n *                 position: 'fixed',\n *                 top: 0,\n *                 right: 0,\n *                 bottom: 0,\n *                 width: '400px',\n *                 overflow: 'auto'\n *             }\n *         }\n *     >\n *         <Popup>\n *             Попап отрендерился в PopupContainerProvider, а не в body\n *             При скролле внутри блока, попап ездит вместе с остальным контентом.\n *         </Popup>\n *     </PopupContainerProvider>\n *  </Page>\n * ```\n */\nclass PopupContainerProvider extends\n    React.PureComponent<PopupContainerProviderProps, PopupContainerProviderState> {\n    protected cn = createCn('popup-container');\n\n    state = {\n        didRender: false, // eslint-disable-line react/no-unused-state\n    };\n\n    private renderContainer: IsolatedContainer;\n\n    private positioningContainer: HTMLElement;\n\n    static childContextTypes = popupContextTypes;\n\n    getChildContext() {\n        return {\n            isInCustomContainer: true,\n            renderContainerElement: (this.renderContainer && this.renderContainer.getNode()),\n            positioningContainerElement: this.positioningContainer,\n        };\n    }\n\n    componentDidMount() {\n        this.handleContainerDidRender();\n    }\n\n    render() {\n        return (\n            <div\n                className={ this.cn() }\n                id={ this.props.id }\n                ref={ (positioningContainer) => {\n                    this.positioningContainer = positioningContainer;\n                } }\n                style={ this.props.style }\n                data-test-id={ this.props['data-test-id'] }\n            >\n                { this.props.children }\n                <IsolatedContainer\n                    ref={ (renderContainer) => {\n                        this.renderContainer = renderContainer;\n                    } }\n                />\n            </div>\n        );\n    }\n\n    /**\n     * Необходимо для обновления childContext сразу после получения refs.\n     */\n    private handleContainerDidRender() {\n        this.setState({\n            didRender: true, // eslint-disable-line react/no-unused-state\n        });\n    }\n\n    /**\n     * Возвращает корневой `HTMLElement` компонента.\n     */\n    public getNode(): HTMLElement {\n        return this.positioningContainer;\n    }\n}\n\nexport default PopupContainerProvider;\n"]}