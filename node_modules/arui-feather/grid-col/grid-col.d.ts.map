{"version":3,"sources":["grid-col/grid-col.tsx"],"names":[],"mappings":"AAGA,OAAO,KAAK,MAAM,OAAO,CAAC;AAG1B,aAAK,eAAe,GAAG;IACnB,MAAM,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;IAClC,MAAM,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;IAClC,OAAO,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;IACnC,UAAU,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;IACtC,UAAU,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;IACtC,UAAU,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;IACtC,UAAU,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;IACtC,UAAU,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;IACtC,UAAU,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;IACtC,WAAW,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;IACvC,WAAW,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;IACvC,WAAW,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,MAAM,CAAC;CAC1C,CAAC;AAEF,oBAAY,YAAY,GAAG;IAEvB;;OAEG;IACH,EAAE,CAAC,EAAE,MAAM,CAAC;IAEZ;;OAEG;IACH,SAAS,CAAC,EAAE,MAAM,CAAC;IAEnB;;OAEG;IACH,KAAK,CAAC,EAAE,KAAK,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAEpC;;;;;;;OAOG;IACH,KAAK,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,eAAe,CAAC;IAE1C;;;;;;;OAOG;IACH,MAAM,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,eAAe,CAAC;IAE3C;;;;;;;OAOG;IACH,KAAK,CAAC,EAAE,MAAM,GAAG,MAAM,GAAG,eAAe,CAAC;IAE1C;;OAEG;IACH,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,iBAAiB,CAAC;IAElC;;OAEG;IACH,QAAQ,CAAC,EAAE,KAAK,CAAC,SAAS,CAAC;IAE3B;;OAEG;IACH,cAAc,CAAC,EAAE,MAAM,CAAC;CAC3B,CAAC;AAEF;;;;GAIG;AACH,qBAAa,OAAQ,SAAQ,KAAK,CAAC,aAAa,CAAC,YAAY,CAAC;IAC1D,SAAS,CAAC,EAAE;;;;;;iBAAwB;IAEpC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,YAAY,CAAC,CAEzC;IAED,MAAM;IAwBN;;;;OAIG;IAEH,OAAO,CAAC,gBAAgB;CAiC3B;AAED,eAAe,OAAO,CAAC","file":"grid-col.d.ts","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\nimport React from 'react';\nimport { createCn } from 'bem-react-classname';\n\ntype BreakpointsType = {\n    mobile?: string | number | object;\n    tablet?: string | number | object;\n    desktop?: string | number | object;\n    'mobile-s'?: string | number | object;\n    'mobile-m'?: string | number | object;\n    'mobile-l'?: string | number | object;\n    'tablet-s'?: string | number | object;\n    'tablet-m'?: string | number | object;\n    'tablet-l'?: string | number | object;\n    'desktop-s'?: string | number | object;\n    'desktop-m'?: string | number | object;\n    'desktop-l'?: string | number | object;\n};\n\nexport type GridColProps = {\n\n    /**\n     * Уникальный идентификатор блока\n     */\n    id?: string;\n\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Управление выравниванием колонок по вертикальной оси\n     */\n    align?: 'top' | 'middle' | 'bottom';\n\n    /**\n     * Управление шириной колонки.\n     * Возможные значения: `[1..12, available, auto]`\n     * или `{ mobile: [1..12], tablet: [1..12], desktop: [1..12] }`\n     * или `{ mobile: { s: [1..12], m: [1..12], l: [1..12] },\n     * tablet: { s: [1..12], m: [1..12] },\n     * desktop: { s: [1..12], m: [1..12], l: [1..12], xl: [1..12] } }`.\n     */\n    width?: string | number | BreakpointsType;\n\n    /**\n     * Управлние смещением колонки.\n     * Возможные значения: `[1..11]`\n     * или `{ mobile: [1..11], tablet: [1..11], desktop: [1..11] }`\n     * или `{ mobile: { s: [1..11], m: [1..11], l: [1..11] },\n     * tablet: { s: [1..11], m: [1..11] },\n     * desktop: { s: [1..11], m: [1..11], l: [1..11], xl: [1..11] } }`.\n     */\n    offset?: string | number | BreakpointsType;\n\n    /**\n     * Управление порядком колонок.\n     * Возможные значения: `[1..12, first, last]`\n     * или `{ mobile: [1..last], tablet: [1..last], desktop: [1..last] }`\n     * или `{ mobile: { s: [1..last], m: [1..last], l: [1..last] },\n     * tablet: { s: [1..last], m: [1..last] },\n     * desktop: { s: [1..last], m: [1..last], l: [1..last], xl: [1..last] } }`.\n     */\n    order?: string | number | BreakpointsType;\n\n    /**\n     * Html тег компонента.\n     */\n    tag?: keyof JSX.IntrinsicElements;\n\n    /**\n     * Дочерние элементы `GridCol`\n     */\n    children?: React.ReactNode;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    'data-test-id'?: string;\n};\n\n/**\n * Колонки используются для создания сетки.\n * Сетка имеет резиновую систему разметки, которая масштабируется до 12 столбцов.\n * Колонки должны быть помещены в строки (компонент `GridRow`).\n */\nexport class GridCol extends React.PureComponent<GridColProps> {\n    protected cn = createCn('grid-col');\n\n    static defaultProps: Partial<GridColProps> = {\n        tag: 'div',\n    }\n\n    render() {\n        const {\n            width,\n            offset,\n            order,\n            align,\n            tag: Tag,\n            children,\n            ...props\n        } = this.props;\n\n        return (\n            <Tag\n                { ...props }\n                className={ this.cn({\n                    align,\n                    ...this.createClassNames({ width, offset, order }),\n                }) }\n            >\n                { children }\n            </Tag>\n        );\n    }\n\n    /**\n     * Создает объект модификаторов для переданных свойств.\n     *\n     * @param props Свойства.\n     */\n    // eslint-disable-next-line class-methods-use-this\n    private createClassNames(props: object) {\n        const classNames = {};\n\n        Object.keys(props).forEach((name) => {\n            const prop = props[name];\n\n            if (!prop) {\n                return;\n            }\n            if (typeof prop !== 'object') {\n                classNames[name] = prop;\n\n                return;\n            }\n            Object.keys(prop).forEach((breakpoint) => {\n                if (prop[breakpoint] === null) {\n                    return;\n                }\n                if (typeof prop[breakpoint] === 'object') {\n                    Object.keys(prop[breakpoint]).forEach((size) => {\n                        if (prop[breakpoint][size] === null) {\n                            return;\n                        }\n                        classNames[`${name}-${breakpoint}-${size}`] = prop[breakpoint][size].toString();\n                    });\n                } else {\n                    classNames[`${name}-${breakpoint}`] = prop[breakpoint].toString();\n                }\n            });\n        });\n\n        return classNames;\n    }\n}\n\nexport default GridCol;\n"]}