"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
var react_1 = __importDefault(require("react"));
var bem_react_classname_1 = require("bem-react-classname");
/**
 * Колонки используются для создания сетки.
 * Сетка имеет резиновую систему разметки, которая масштабируется до 12 столбцов.
 * Колонки должны быть помещены в строки (компонент `GridRow`).
 */
var GridCol = /** @class */ (function (_super) {
    __extends(GridCol, _super);
    function GridCol() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.cn = bem_react_classname_1.createCn('grid-col');
        return _this;
    }
    GridCol.prototype.render = function () {
        var _a = this.props, width = _a.width, offset = _a.offset, order = _a.order, align = _a.align, Tag = _a.tag, children = _a.children, props = __rest(_a, ["width", "offset", "order", "align", "tag", "children"]);
        return (react_1.default.createElement(Tag, __assign({}, props, { className: this.cn(__assign({ align: align }, this.createClassNames({ width: width, offset: offset, order: order }))) }), children));
    };
    /**
     * Создает объект модификаторов для переданных свойств.
     *
     * @param props Свойства.
     */
    // eslint-disable-next-line class-methods-use-this
    GridCol.prototype.createClassNames = function (props) {
        var classNames = {};
        Object.keys(props).forEach(function (name) {
            var prop = props[name];
            if (!prop) {
                return;
            }
            if (typeof prop !== 'object') {
                classNames[name] = prop;
                return;
            }
            Object.keys(prop).forEach(function (breakpoint) {
                if (prop[breakpoint] === null) {
                    return;
                }
                if (typeof prop[breakpoint] === 'object') {
                    Object.keys(prop[breakpoint]).forEach(function (size) {
                        if (prop[breakpoint][size] === null) {
                            return;
                        }
                        classNames[name + "-" + breakpoint + "-" + size] = prop[breakpoint][size].toString();
                    });
                }
                else {
                    classNames[name + "-" + breakpoint] = prop[breakpoint].toString();
                }
            });
        });
        return classNames;
    };
    GridCol.defaultProps = {
        tag: 'div',
    };
    return GridCol;
}(react_1.default.PureComponent));
exports.GridCol = GridCol;
exports.default = GridCol;

//# sourceMappingURL=grid-col.js.map
