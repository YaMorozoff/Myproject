{"version":3,"sources":["phone-input/phone-input.tsx"],"names":[],"mappings":"AAQA,OAAO,KAAK,MAAM,OAAO,CAAC;AAI1B,OAAc,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AAEnD,oBAAY,eAAe,GAAG,UAAU,GAAG;IACvC;;;OAGG;IACH,IAAI,CAAC,EAAE,MAAM,CAAC;IACd;;OAEG;IACH,WAAW,CAAC,EAAE,MAAM,CAAC;CACxB,CAAC;AAEF,aAAK,eAAe,GAAG;IACnB,YAAY,CAAC,EAAE,MAAM,CAAC;CACzB,CAAA;AAED;;GAEG;AACH,qBAAa,UAAW,SAAQ,KAAK,CAAC,aAAa,CAAC,eAAe,EAAE,eAAe,CAAC;IACjF,SAAS,CAAC,EAAE;;;;;;iBAA2B;IAEvC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,eAAe,CAAC,CAG3C;IAEF,KAAK;;MAEH;IAEF,IAAI,MAAC;IAEL,MAAM;IAmBN;;;;;;OAMG;IACH,OAAO,CAAC,YAAY,CAoBlB;IAEF,MAAM,CAAC,UAAU,CAAC,aAAa,EAAE,MAAM,EAAE,IAAI,SAAmB,GAAG,MAAM;IAgBzE;;OAEG;IACI,KAAK;IAIZ;;OAEG;IACI,IAAI;IAIX;;OAEG;IACI,QAAQ;CAGlB;;IApHG;;;OAGG;;IAEH;;OAEG;;;AA+GP,wBAAkE","file":"phone-input.d.ts","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n// @ts-nocheck\n\n/* eslint-disable max-len */\n\nimport React from 'react';\nimport { createCn } from 'bem-react-classname';\nimport { withTheme } from '../cn';\n\nimport Input, { InputProps } from '../input/input';\n\nexport type PhoneInputProps = InputProps & {\n    /**\n     * Определяет маску для ввода значений.\n     * <a href=\"https://github.com/insin/inputmask-core#pattern\" target=\"_blank\">Шаблон маски</a>\n     */\n    mask?: string;\n    /**\n     * Подсказка в текстовом поле\n     */\n    placeholder?: string;\n};\n\ntype PhoneInputState = {\n    updatedValue?: string;\n}\n\n/**\n * Компонент ввода телефона по маске.\n */\nexport class PhoneInput extends React.PureComponent<PhoneInputProps, PhoneInputState> {\n    protected cn = createCn('phone-input');\n\n    static defaultProps: Partial<PhoneInputProps> = {\n        mask: '+1 111 111 11 11',\n        placeholder: '+7 000 000 00 00',\n    };\n\n    state = {\n        updatedValue: undefined,\n    };\n\n    root;\n\n    render() {\n        const { value } = this.props;\n        const { updatedValue } = this.state;\n\n        return (\n            <Input\n                { ...this.props }\n                type=\"tel\"\n                ref={ (root) => {\n                    this.root = root;\n                } }\n                formNoValidate={ true }\n                className={ this.cn() }\n                onChange={ this.handleChange }\n                value={ updatedValue === undefined ? value : updatedValue }\n            />\n        );\n    }\n\n    /**\n     * Промежуточный обработчик value после изменения значения.\n     * В value проверяется, что первый числовой символ 7,\n     * если 7, то ничего не делаем\n     * если 8, то происходит замена на 7\n     * иначе вставляем 7, а остальное сдвигаем\n     */\n    private handleChange = (value?: string, event?: React.ChangeEvent<any>) => {\n        const { onChange } = this.props;\n        let valueForOnChange = value;\n\n        if (value?.length > 1 && !/^\\+7.*$/.test(value)) {\n            const [plus, code]: [string, string] = value;\n\n            if (code === '8') {\n                valueForOnChange = value.replace(/^\\+(8)(.*)$/, '+7$2');\n            } else {\n                valueForOnChange = `${plus}7${PhoneInput.shiftValue(value.slice(1).replace(/\\s/g, ''))}`;\n            }\n        } else if (value?.length === 1) {\n            valueForOnChange = '';\n        }\n        if (onChange) {\n            onChange(valueForOnChange, event);\n        } else {\n            this.setState({ updatedValue: valueForOnChange });\n        }\n    };\n\n    static shiftValue(originalValue: string, mask = ' 111 111 11 11'): string {\n        let shiftedValue = '';\n        let specCounter = 0;\n\n        mask.split('').forEach((sym, index) => {\n            if (sym !== '1' && originalValue[index - specCounter]) {\n                shiftedValue += sym;\n                specCounter += 1;\n            } else {\n                shiftedValue += originalValue[index - specCounter] || '';\n            }\n        });\n\n        return shiftedValue;\n    }\n\n    /**\n     * Устанавливает фокус на поле ввода.\n     */\n    public focus() {\n        this.root.focus();\n    }\n\n    /**\n     * Убирает фокус с поля ввода.\n     */\n    public blur() {\n        this.root.blur();\n    }\n\n    /**\n     * Скроллит страницу до поля ввода.\n     */\n    public scrollTo() {\n        this.root.scrollTo();\n    }\n}\n\nexport default withTheme<PhoneInputProps, PhoneInput>(PhoneInput);\n"]}