{"version":3,"sources":["menu/menu.tsx"],"names":[],"mappings":"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","file":"menu.d.ts","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n/* eslint jsx-a11y/no-static-element-interactions: 0 */\n\nimport React from 'react';\nimport { createCn } from 'bem-react-classname';\nimport { withTheme } from '../cn';\n\nimport IconCheck from '../icon/ui/tick';\nimport MenuItem, { MenuItemProps } from '../menu-item/menu-item';\n\nimport { isNodeOutsideElement } from '../lib/window';\nimport keyboardCode from '../lib/keyboard-code';\nimport performance from '../performance';\n\nexport type MenuHighlightedItemShapeType = {\n\n    /**\n     * Уникальный идентификатор\n     */\n    ref?: number | string;\n\n    /**\n     * Элемент списка типа ContentItem\n     */\n    item?: any;\n}\n\n// TODO: тут надо переделать типы, и сделать условными сейчас не очевидно\nexport type MenuContentType = {\n\n    /**\n     * Тип элемента\n     */\n    type?: 'item' | 'group';\n\n    /**\n     * Ключ для перечисления\n     */\n    key?: React.Key;\n\n    /**\n     * Название группы\n     */\n    title?: string;\n\n    /**\n     * Только для type='item', свойство для компонента [MenuItem](#!/MenuItem)\n     */\n    value?: string | number;\n\n    /**\n     * Содержание элемента\n     */\n    content?: React.ReactNode | any[];\n\n    /**\n     * Только для type='item': свойства для компонента [MenuItem](#!/MenuItem)\n     */\n    props?: MenuItemProps;\n};\n\nexport type MenuProps = {\n\n    /**\n     * Тип расположения меню: 'horizontal'\n     */\n    view?: string;\n\n    /**\n     * Размещение заголовка групп: обычное или в одну строку с первым элементом группы\n     */\n    groupView?: 'default' | 'line';\n\n    /**\n     * Тип списка вариантов меню\n     */\n    mode?: 'basic' | 'check' | 'radio' | 'radio-check';\n\n    /**\n     * Управление возможностью изменения значения\n     */\n    disabled?: boolean;\n\n    /**\n     * Управление состоянием фокуса элемента\n     */\n    focused?: boolean;\n\n    /**\n     * Управление автоматическим фокусом на первом элементе при вызове публичного метода focus\n     */\n    autoFocusFirstItem?: boolean;\n\n    /**\n     * Элемент меню, на котором стоит выделение\n     */\n    highlightedItem?: MenuHighlightedItemShapeType;\n\n    /**\n     * Список объектов ContentItem\n     */\n    content?: MenuContentType[];\n\n    /**\n     * Список значений выбранных элементов\n     */\n    checkedItems?: ReadonlyArray<string | number>;\n\n    /**\n     * Размер компонента\n     */\n    size?: 's' | 'm' | 'l' | 'xl';\n\n    /**\n     * Объект со стилями\n     */\n    style?: React.CSSProperties;\n    /**\n     * Тема компонента\n     */\n    theme?: 'alfa-on-color' | 'alfa-on-white';\n\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Идентификатор компонента в DOM\n     */\n    id?: string;\n\n    /**\n     * Обработчик клика по варианту меню\n     */\n    onItemClick?: (item?: any, event?: React.ChangeEvent<any>) => void;\n\n    /**\n     * Обработчик выбора варианта меню\n     */\n    onItemCheck?: (checkedItems?: any[], event?: React.ChangeEvent<any>) => void;\n\n    /**\n     * Обработчик события наведения курсора на меню\n     */\n    onMouseEnter?: (event?: React.MouseEvent<any>) => void;\n\n    /**\n     * Обработчик события снятия курсора с меню\n     */\n    onMouseLeave?: (event?: React.MouseEvent<any>) => void;\n\n    /**\n     * Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте\n     */\n    onKeyDown?: (event?: React.KeyboardEvent<any>, item?) => void;\n\n    /**\n     * Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте\n     */\n    onKeyUp?: (event?: React.KeyboardEvent<any>) => void;\n\n    /**\n     * Обработчик фокуса\n     */\n    onFocus?: (event?: React.FocusEvent<any>) => void;\n\n    /**\n     * Обработчик снятия фокуса\n     */\n    onBlur?: (event?: React.FocusEvent<any>) => void;\n\n    /**\n     * Обработчик события выделения элемента меню, принимает на вход переменную типа HighlightedItem\n     */\n    onHighlightItem?: (highlightedItem?: any) => void;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    'data-test-id'?: string;\n\n};\n\n/**\n * Компонент меню.\n */\n@performance(true)\nexport class Menu extends React.Component<MenuProps> {\n    protected cn = createCn('menu');\n\n    static defaultProps: Partial<MenuProps> = {\n        size: 'm',\n        mode: 'basic',\n        groupView: 'default',\n        autoFocusFirstItem: false,\n    };\n\n    state = {\n        highlightedItem: null,\n        checkedItems: [],\n        hovered: false,\n    };\n\n    // TODO [issues/1018] переписать тесты нужно, что бы private был\n    root;\n\n    private menuItemList = [];\n\n    private blurTimeoutId = null;\n\n    componentDidMount() {\n        if (!!this.props.content && this.props.content.length > 0\n            && (!this.props.checkedItems || this.props.checkedItems.length === 0)\n            && this.props.mode === 'radio') {\n            const firstItem = this.getFirstItem(this.props.content);\n\n            this.changeCheckedItems([firstItem.value], null);\n        }\n    }\n\n    // eslint-disable-next-line camelcase\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        if (this.props.mode !== 'check' && this.state.checkedItems[0]\n            && nextProps.checkedItems[0] !== this.state.checkedItems[0]) {\n            let highlightedItem;\n\n            this.menuItemList.forEach((item, index, menuItemList) => {\n                if (item.ref === nextProps.checkedItems[0]) {\n                    highlightedItem = menuItemList[index].instance;\n                }\n            });\n\n            if (this.props.onHighlightItem) {\n                this.props.onHighlightItem(highlightedItem);\n            }\n        }\n    }\n\n    // eslint-disable-next-line camelcase\n    UNSAFE_componentWillUpdate() {\n        this.menuItemList = [];\n    }\n\n    componentWillUnmount() {\n        if (this.blurTimeoutId) {\n            clearTimeout(this.blurTimeoutId);\n            this.blurTimeoutId = null;\n        }\n    }\n\n    render() {\n        /* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n        return (\n            <div\n                ref={ (root) => {\n                    this.root = root;\n                } }\n                style={ this.props.style }\n                className={ this.cn({\n                    size: this.props.size,\n                    view: this.props.view,\n                    'group-view': this.props.groupView,\n                    hovered: this.state.hovered,\n                    disabled: this.props.disabled,\n                    mode: this.props.mode,\n                }) }\n                id={ this.props.id }\n                tabIndex={ 0 }\n                onMouseEnter={ this.handleMouseEnter }\n                onMouseLeave={ this.handleMouseLeave }\n                onKeyDown={ this.handleKeyDown }\n                onKeyUp={ this.handleKeyUp }\n                onFocus={ this.handleFocus }\n                onBlur={ this.handleBlur }\n                data-test-id={ this.props['data-test-id'] }\n            >\n                { !!this.props.content && this.renderMenuItemList(this.props.content) }\n            </div>\n        );\n        /* eslint-enable jsx-a11y/no-noninteractive-tabindex */\n    }\n\n    renderMenuItemList(content) {\n        const result = [];\n        let groupKey = 0;\n\n        content.forEach((item) => {\n            if (item.type === 'group') {\n                result.push(\n                    <div\n                        className={ this.cn('group') }\n                        key={ `group_${groupKey}` }\n                    >\n                        { !!item.title\n                            && (\n                                <div className={ this.cn('group-title') }>\n                                    { item.title }\n                                </div>\n                            ) }\n                        { this.renderMenuItemList(item.content) }\n                    </div>,\n                );\n                groupKey += 1;\n            } else {\n                result.push(this.renderMenuItem(item));\n            }\n        });\n\n        return result;\n    }\n\n    renderMenuItem(item) {\n        const itemProps = item.props || {};\n        const isItemChecked = this.getIndexInCheckedItemsList(item.value) !== -1;\n        const isItemDisabled = this.props.disabled || itemProps.disabled;\n        const clickHandler = this.props.mode === 'basic' ? itemProps.onClick : (event) => this.handleMenuItemClick(item, event);\n        const menuItem: { item; ref; instance? } = {\n            item,\n            ref: item.value,\n        };\n        const menuItemProps = {\n            ...itemProps,\n            disabled: isItemDisabled,\n            value: item.value,\n            size: this.props.size || itemProps.size,\n            onClick: isItemDisabled ? undefined : clickHandler,\n        };\n        const highlightedItem = this.props.highlightedItem === undefined\n            ? this.state.highlightedItem\n            : this.props.highlightedItem;\n        let iconSize;\n\n        switch (this.props.size) {\n        case 's': case 'm': iconSize = 's'; break;\n        case 'l': case 'xl': iconSize = 'm'; break;\n        }\n\n        this.menuItemList.push(menuItem);\n\n        return (\n            <MenuItem\n                { ...menuItemProps }\n                ref={ (instance) => {\n                    menuItem.instance = instance;\n                } }\n                key={ item.key || item.value }\n                checked={ isItemChecked }\n                type={ this.props.mode === 'basic' ? itemProps.type : 'block' }\n                onMouseEnter={ () => this.handleMenuItemMouseEnter(menuItem) }\n                onMouseLeave={ this.handleMenuItemMouseLeave }\n                hovered={ highlightedItem && highlightedItem.ref === menuItem.ref }\n            >\n                {\n                    this.props.mode === 'check' && isItemChecked\n                    && (\n                        <IconCheck\n                            size={ iconSize }\n                        />\n                    )\n                }\n                { item.content }\n            </MenuItem>\n        );\n    }\n\n    private handleMenuItemClick = (item, event) => {\n        this.setNewCheckedItems(item, event);\n\n        if (this.props.onItemClick) {\n            this.props.onItemClick(item, event);\n        }\n    };\n\n    private handleMouseEnter = (event) => {\n        this.setState({ hovered: true });\n\n        if (this.props.onMouseEnter) {\n            this.props.onMouseEnter(event);\n        }\n    };\n\n    private handleMouseLeave = (event) => {\n        this.setState({ hovered: false });\n\n        if (this.props.onMouseLeave) {\n            this.props.onMouseLeave(event);\n        }\n    };\n\n    private handleKeyUp = (event) => {\n        if (this.props.onKeyUp) {\n            this.props.onKeyUp(event);\n        }\n    };\n\n    private handleKeyDown = (event) => {\n        let highlightedItem = null;\n        let highlightedMenuItem = null;\n        const menuIteListLength = this.menuItemList.length;\n\n        switch (event.which) {\n        case keyboardCode.DOWN_ARROW: {\n            event.preventDefault();\n\n            if (this.state.highlightedItem) {\n                this.menuItemList.forEach((item, index, menuItemList) => {\n                    if (item.ref === this.state.highlightedItem.ref) {\n                        if (index + 1 === menuIteListLength) {\n                            [highlightedItem] = menuItemList;\n                        } else {\n                            highlightedItem = menuItemList[index + 1];\n                        }\n                    }\n                });\n            } else {\n                [highlightedItem] = this.menuItemList;\n            }\n\n            this.setState({\n                highlightedItem,\n            });\n\n            if (this.props.onHighlightItem) {\n                this.props.onHighlightItem(highlightedItem);\n            }\n\n            break;\n        }\n        case keyboardCode.UP_ARROW: {\n            event.preventDefault();\n\n            if (this.state.highlightedItem) {\n                this.menuItemList.forEach((item, index, menuItemList) => {\n                    if (item.ref === this.state.highlightedItem.ref) {\n                        if (index - 1 < 0) {\n                            highlightedItem = menuItemList[menuIteListLength - 1];\n                        } else {\n                            highlightedItem = menuItemList[index - 1];\n                        }\n                    }\n                });\n            } else {\n                highlightedItem = this.menuItemList[menuIteListLength - 1];\n            }\n\n            this.setState({\n                highlightedItem,\n            });\n\n            if (this.props.onHighlightItem) {\n                this.props.onHighlightItem(highlightedItem);\n            }\n\n            break;\n        }\n        case keyboardCode.ENTER:\n        case keyboardCode.SPACE: {\n            event.preventDefault();\n\n            highlightedItem = this.props.highlightedItem === undefined\n                ? this.state.highlightedItem\n                : this.props.highlightedItem;\n\n            if (highlightedItem) {\n                this.setNewCheckedItems(highlightedItem.item, event);\n            }\n\n            break;\n        }\n        }\n\n        if (highlightedItem) {\n            highlightedMenuItem = highlightedItem.instance;\n        }\n\n        if (this.props.onKeyDown) {\n            this.props.onKeyDown(event, highlightedMenuItem);\n        }\n    };\n\n    private handleFocus = (event) => {\n        if (this.blurTimeoutId) {\n            clearTimeout(this.blurTimeoutId);\n            this.blurTimeoutId = null;\n        }\n\n        if (this.props.onFocus) {\n            this.props.onFocus(event);\n        }\n    };\n\n    private handleBlur = (event) => {\n        event.persist();\n        if (this.blurTimeoutId) {\n            clearTimeout(this.blurTimeoutId);\n        }\n\n        this.blurTimeoutId = setTimeout(() => {\n            if (isNodeOutsideElement(document.activeElement, this.root) && this.props.onBlur) {\n                this.props.onBlur(event);\n            }\n            this.blurTimeoutId = null;\n        }, 0);\n    };\n\n    private handleMenuItemMouseEnter(menuItem) {\n        this.setState({\n            highlightedItem: menuItem,\n        });\n\n        if (this.props.onHighlightItem) {\n            this.props.onHighlightItem(menuItem);\n        }\n    }\n\n    private handleMenuItemMouseLeave = () => {\n        this.setState({\n            highlightedItem: null,\n        });\n\n        if (this.props.onHighlightItem) {\n            this.props.onHighlightItem(null);\n        }\n    };\n\n    /**\n     * Возвращает корневой `HTMLElement` компонента.\n     */\n    public getNode() {\n        return this.root;\n    }\n\n    /**\n     * Устанавливает фокус на меню.\n     */\n    public focus() {\n        this.root.focus();\n\n        if (this.props.autoFocusFirstItem) {\n            const highlightedItem = this.menuItemList[0];\n\n            this.setState({\n                highlightedItem,\n            });\n\n            if (this.props.onHighlightItem) {\n                this.props.onHighlightItem(highlightedItem);\n            }\n        }\n    }\n\n    /**\n     * Убирает фокус с меню.\n     */\n    // eslint-disable-next-line class-methods-use-this\n    public blur() {\n        if (document.activeElement) {\n            (document.activeElement as HTMLElement).blur();\n        }\n    }\n\n    private setNewCheckedItems(item, event) {\n        const { value } = item;\n        let checkedItems = this.props.checkedItems === undefined\n            ? Array.from(this.state.checkedItems)\n            : Array.from(this.props.checkedItems);\n        const indexInCheckedItemsList = this.getIndexInCheckedItemsList(value);\n\n        switch (this.props.mode) {\n        case 'check':\n            if (indexInCheckedItemsList === -1) {\n                checkedItems.push(value);\n            } else {\n                checkedItems.splice(indexInCheckedItemsList, 1);\n            }\n            break;\n        case 'radio':\n            if (indexInCheckedItemsList === -1) {\n                checkedItems = [value];\n            }\n            break;\n        case 'radio-check':\n            if (indexInCheckedItemsList === -1) {\n                checkedItems = [value];\n            } else {\n                checkedItems = [];\n            }\n            break;\n        default:\n            break;\n        }\n\n        this.changeCheckedItems(checkedItems, event);\n        this.focus();\n    }\n\n    /**\n     * Изменяет выбранные значения.\n     *\n     * @param checkedItems Список выбранных значений\n     * @param event\n     */\n    private changeCheckedItems(checkedItems: Array<string | number>, event: React.ChangeEvent) {\n        this.setState({\n            checkedItems,\n        });\n\n        if (this.props.onItemCheck) {\n            this.props.onItemCheck(checkedItems, event);\n        }\n    }\n\n    private getIndexInCheckedItemsList = (value) => {\n        const checkedItems = this.props.checkedItems ? this.props.checkedItems : this.state.checkedItems;\n\n        return checkedItems.indexOf(value);\n    };\n\n    private getFirstItem(content) {\n        const firstItem = content[0];\n\n        return firstItem.type === 'group' ? this.getFirstItem(firstItem.content) : firstItem;\n    }\n}\n\nexport default withTheme<MenuProps, Menu>(Menu);\n"]}