{"version":3,"sources":["money-input/money-input.tsx"],"names":[],"mappings":"AAQA,OAAO,KAAK,MAAM,OAAO,CAAC;AAI1B,OAAc,EAAE,UAAU,EAAE,MAAM,gBAAgB,CAAC;AA2CnD,aAAK,eAAe,GAAG,UAAU,GAAG;IAChC;;OAEG;IACH,aAAa,CAAC,EAAE,MAAM,CAAC;IACvB;;OAEG;IACH,cAAc,CAAC,EAAE,MAAM,CAAC;IACxB;;OAEG;IACH,IAAI,CAAC,EAAE,OAAO,CAAC;IACf;;OAEG;IACH,YAAY,CAAC,EAAE,OAAO,CAAC;IACvB;;OAEG;IACH,YAAY,CAAC,EAAE,MAAM,CAAC;IACtB;;SAEK;IACL,cAAc,CAAC,EAAE,MAAM,CAAC;IACxB;;SAEK;IACL,QAAQ,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,EAAE,MAAM,KAAK,IAAI,CAAC;CACxD,CAAC;AAEF,aAAK,eAAe,GAAG;IACnB,KAAK,EAAE,MAAM,CAAC;CACjB,CAAA;AAED;;GAEG;AACH,qBAAa,UAAW,SAAQ,KAAK,CAAC,aAAa,CAAC,eAAe,EAAE,eAAe,CAAC;IACjF,SAAS,CAAC,EAAE;;;;;;iBAA2B;IAEvC,MAAM,CAAC,YAAY,EAAE,OAAO,CAAC,eAAe,CAAC,CAM3C;IAEF,KAAK;;MAEH;IAEF,OAAO,CAAC,WAAW,CAAS;IAE5B,OAAO,CAAC,IAAI,CAAO;IAEnB,IAAI,EAAE,gBAAgB,CAAC;IAEvB,OAAO,CAAC,eAAe,CAAuC;IAG9D,yBAAyB;IAKzB,gCAAgC,CAAC,SAAS,KAAA;IAM1C,oBAAoB;IAIpB,MAAM;IAoCN,OAAO,CAAC,2BAA2B,CAgCjC;IAEF,OAAO,CAAC,YAAY,CAMlB;IAEF;;OAEG;IACI,KAAK;IAIZ;;OAEG;IACI,IAAI;IAIX;;OAEG;IACI,QAAQ;IAIf;;;;OAIG;IACH,OAAO,CAAC,iBAAiB;IAoBzB;;OAEG;IACH,OAAO,CAAC,YAAY;IAUpB;;OAEG;IACH,OAAO,CAAC,QAAQ;IAIhB;;;;OAIG;IACH,OAAO,CAAC,iBAAiB;IAUzB;;;;;;;;OAQG;IACH,OAAO,CAAC,0BAA0B;IASlC;;OAEG;IACH,OAAO,CAAC,iBAAiB;CAG5B;;IAnQG;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;OAEG;;IAEH;;SAEK;;IAEL;;SAEK;;;AA2OT,wBAAkE","file":"money-input.d.ts","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n// @ts-nocheck\n\n/* eslint react/prop-types: 0 */\n\nimport React from 'react';\nimport { createCn } from 'bem-react-classname';\nimport { withTheme } from '../cn';\n\nimport Input, { InputProps } from '../input/input';\nimport Mask from '../masked-input/mask';\nimport { getAndroidVersion } from '../masked-input';\n\nimport { getCurrencySymbol } from '../lib/currency-codes';\n\nconst DEFAULT_FRACTION_SIZE = 2;\nconst DEFAULT_INTEGER_SIZE = 9;\nconst INTEGER_PART_SIZE = 3;\n\nconst IS_ANDROID = typeof window !== 'undefined' && /(android)/i.test(window.navigator.userAgent);\n\n/**\n * Возвращает целую и дробную часть значения в виде массива.\n * Если дробная часть не равна `undefined`, значит введена дробная часть\n * или хотя бы запятая.\n *\n * @param value Значение\n */\nfunction getValueParts(value: string) {\n    return value\n        .replace(/[.бю]/g, ',') // Заменяем точки, `б` и `ю` на запятые.\n        .replace(/[^\\d,]/g, '') // Удаляем все, что не является цифрой или запятой.\n        .split(',') // Разделяем по запятой.\n        .slice(0, 2); // Отрезаем, если больше, чем один фрагмент после запятой.\n}\n\n/**\n * Сплитит интегер в группы по 3.\n *\n * @param str Строка интегера\n */\nfunction splitInteger(str: string): string {\n    if (str.length <= INTEGER_PART_SIZE) {\n        return [str];\n    }\n\n    const from = str.length - INTEGER_PART_SIZE;\n    const to = str.length;\n\n    return [str.slice(from, to)].concat(splitInteger(str.slice(0, from)));\n}\n\ntype MoneyInputProps = InputProps & {\n    /**\n     * Максимально допустимая длина значения до запятой\n     */\n    integerLength?: number;\n    /**\n     * Максимально допустимая длина значения после запятой\n     */\n    fractionLength?: number;\n    /**\n     * Толщина шрифта\n     */\n    bold?: boolean;\n    /**\n     * Отображение символа валюты\n     */\n    showCurrency?: boolean;\n    /**\n     * Международный код валюты\n     */\n    currencyCode?: string;\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     * */\n    'data-test-id'?: string;\n    /**\n     * Обработчик события, вызываемый при событии 'change'\n     * */\n    onChange?: (value?: string, amount?: number) => void;\n};\n\ntype MoneyInputState = {\n    value: string;\n}\n\n/**\n * Компонент поля для ввода суммы. Может принимать в качестве значения либо число, либо число с сотой долей.\n */\nexport class MoneyInput extends React.PureComponent<MoneyInputProps, MoneyInputState> {\n    protected cn = createCn('money-input');\n\n    static defaultProps: Partial<MoneyInputProps> = {\n        fractionLength: DEFAULT_FRACTION_SIZE,\n        integerLength: DEFAULT_INTEGER_SIZE,\n        bold: false,\n        showCurrency: false,\n        currencyCode: 'RUR',\n    };\n\n    state = {\n        value: '',\n    };\n\n    private maskPattern: string;\n\n    private mask: Mask;\n\n    root: HTMLInputElement;\n\n    private caretFixTimeout: ReturnType<typeof setTimeout> = null;\n\n    // eslint-disable-next-line camelcase\n    UNSAFE_componentWillMount() {\n        this.updateMaskByValue(this.getValue());\n    }\n\n    // eslint-disable-next-line camelcase\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        if (this.props.value !== nextProps.value) {\n            this.updateMaskByValue(nextProps.value || '');\n        }\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.caretFixTimeout);\n    }\n\n    render() {\n        return (\n            <div\n                className={ this.cn({\n                    currency: this.props.showCurrency,\n                    bold: this.props.bold,\n                    width: this.props.width,\n                }) }\n                data-test-id={ this.props['data-test-id'] }\n            >\n                <Input\n                    { ...this.props }\n                    ref={ (root) => {\n                        this.root = root;\n                    } }\n                    formNoValidate={ true }\n                    mask={ this.maskPattern }\n                    maxLength={ this.getMaxLength() }\n                    value={ this.getValue() }\n                    leftAddons={\n                        this.props.showCurrency ? (\n                            <span className={ this.cn('currency') }>\n                                <span className={ this.cn('value') }>{ this.getCurrencySpacer() }</span>\n                                <span>{ getCurrencySymbol(this.props.currencyCode) }</span>\n                            </span>\n                        ) : (\n                            this.props.leftAddons\n                        )\n                    }\n                    onChange={ this.handleChange }\n                    onProcessMaskInputEvent={ this.handleProcessMaskInputEvent }\n                />\n            </div>\n        );\n    }\n\n    private handleProcessMaskInputEvent = (event) => {\n        const currentValue = this.getValue();\n        const currentFormattedValue = this.mask.format(this.getValue());\n        let newValue = event.target.value;\n        const currentSelection = this.root.control.input.selectionStart;\n\n        // При удалении отрезаем запятую, если исчезла дробная часть.\n        if (newValue.length < currentFormattedValue.length) {\n            const fractionPart = getValueParts(newValue)[1]; // Берем значение после запятой\n\n            // `fractionPart !== undefined` - значит запятая введена, но\n            // `fractionPart.length === 0` - значит цифр после запятой нет.\n            if (fractionPart !== undefined && fractionPart.length === 0) {\n                newValue = newValue.substring(0, newValue.length - 1);\n                // eslint-disable-next-line no-param-reassign\n                event.target.value = newValue;\n            }\n        }\n\n        this.updateMaskByValue(newValue);\n\n        // При добавлении/изменении через selection последней цифры целой части каретка должна\n        // оставаться перед запятой\n        if (newValue.length >= currentValue.length && newValue[currentSelection] === ',') {\n            window.requestAnimationFrame(() => {\n                // Фикс бага смещения каретки в браузере на андроидах Jelly Bean (c 4.1 по 4.3)\n                const offsetSection = IS_ANDROID && parseFloat(getAndroidVersion() as string) < 4.4 ? 1 : 0;\n                const newSelectionStart = this.root.control.input.selectionStart - 1;\n\n                this.setInputSelection(newSelectionStart + offsetSection);\n            });\n        }\n    };\n\n    private handleChange = (value) => {\n        this.setState({ value });\n\n        if (this.props.onChange) {\n            this.props.onChange(value, Number(value.replace(/[^\\d,]/g, '').replace(/,/g, '.')));\n        }\n    };\n\n    /**\n     * Устанавливает фокус на поле ввода.\n     */\n    public focus() {\n        this.root.focus();\n    }\n\n    /**\n     * Убирает фокус с поля ввода.\n     */\n    public blur() {\n        this.root.blur();\n    }\n\n    /**\n     * Скроллит страницу до поля ввода.\n     */\n    public scrollTo() {\n        this.root.scrollTo();\n    }\n\n    /**\n     * Обновляет маску по значению: группирует целую часть в блоки по три символа.\n     *\n     * @param value Значение\n     */\n    private updateMaskByValue(value: string) {\n        const [integerPart, fractionPart] = getValueParts(value);\n\n        const integerPartLength = Math.max(Math.min(integerPart.length || 1, this.props.integerLength));\n\n        this.maskPattern = splitInteger(new Array(integerPartLength + 1).join('1'))\n            .reverse()\n            .join(' ');\n\n        if (fractionPart !== undefined && this.props.fractionLength > 0) {\n            this.maskPattern += `,${new Array(this.props.fractionLength + 1).join('1')}`;\n        }\n\n        this.mask = new Mask(this.maskPattern);\n\n        if (this.root) {\n            this.root.getMaskedInputInstance().setMask(this.maskPattern);\n        }\n    }\n\n    /**\n     * Расчитывает максимально допустимую длинну поля ввода.\n     */\n    private getMaxLength() {\n        let maxLength = Math.floor((this.props.integerLength - 1) / INTEGER_PART_SIZE) + this.props.integerLength;\n\n        if (this.props.fractionLength) {\n            maxLength += 1 + this.props.fractionLength;\n        }\n\n        return maxLength;\n    }\n\n    /**\n     * Возвращает актуальное значение для рендера.\n     */\n    private getValue() {\n        return this.props.value === undefined ? this.state.value : this.props.value;\n    }\n\n    /**\n     * Устанавливает каретку поля ввода в новую позицию.\n     *\n     * @param selection Новое положение каретки\n     */\n    private setInputSelection(selection: number) {\n        this.root.control.input.selectionStart = selection;\n        this.root.control.input.selectionEnd = selection;\n        // Android chrome имеет дефект с автоматической установкой каретки\n        // при использовании клавиатуры отличной от type=\"text\".\n        if (IS_ANDROID) {\n            this.setInputSelectionByTimeout(selection);\n        }\n    }\n\n    /**\n     * Устанавливает каретку поля ввода в заданную позицию асинхронно.\n     *\n     * Во-избежание дефекта с установкой каретки, наблюдаемом в мобильных браузерах,\n     * установка происходит асинхронно, с минимальной задержкой,\n     * с помощью [setTimeout] обертки.\n     *\n     * @param selection Положение каретки\n     */\n    private setInputSelectionByTimeout(selection: number) {\n        clearTimeout(this.caretFixTimeout);\n\n        this.caretFixTimeout = setTimeout(() => {\n            this.root.control.input.selectionStart = selection;\n            this.root.control.input.selectionEnd = selection;\n        }, 0);\n    }\n\n    /**\n     * Возвращает значение (невидимый текст) для корректного отображения значка валюты.\n     */\n    private getCurrencySpacer() {\n        return this.mask.format(this.getValue()) || this.props.placeholder;\n    }\n}\n\nexport default withTheme<MoneyInputProps, MoneyInput>(MoneyInput);\n"]}