{"version":3,"sources":["money-input/money-input.tsx"],"names":[],"mappings":"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","file":"money-input.js","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\n// @ts-nocheck\n\n/* eslint react/prop-types: 0 */\n\nimport React from 'react';\nimport { createCn } from 'bem-react-classname';\nimport { withTheme } from '../cn';\n\nimport Input, { InputProps } from '../input/input';\nimport Mask from '../masked-input/mask';\nimport { getAndroidVersion } from '../masked-input';\n\nimport { getCurrencySymbol } from '../lib/currency-codes';\n\nconst DEFAULT_FRACTION_SIZE = 2;\nconst DEFAULT_INTEGER_SIZE = 9;\nconst INTEGER_PART_SIZE = 3;\n\nconst IS_ANDROID = typeof window !== 'undefined' && /(android)/i.test(window.navigator.userAgent);\n\n/**\n * Возвращает целую и дробную часть значения в виде массива.\n * Если дробная часть не равна `undefined`, значит введена дробная часть\n * или хотя бы запятая.\n *\n * @param value Значение\n */\nfunction getValueParts(value: string) {\n    return value\n        .replace(/[.бю]/g, ',') // Заменяем точки, `б` и `ю` на запятые.\n        .replace(/[^\\d,]/g, '') // Удаляем все, что не является цифрой или запятой.\n        .split(',') // Разделяем по запятой.\n        .slice(0, 2); // Отрезаем, если больше, чем один фрагмент после запятой.\n}\n\n/**\n * Сплитит интегер в группы по 3.\n *\n * @param str Строка интегера\n */\nfunction splitInteger(str: string): string {\n    if (str.length <= INTEGER_PART_SIZE) {\n        return [str];\n    }\n\n    const from = str.length - INTEGER_PART_SIZE;\n    const to = str.length;\n\n    return [str.slice(from, to)].concat(splitInteger(str.slice(0, from)));\n}\n\ntype MoneyInputProps = InputProps & {\n    /**\n     * Максимально допустимая длина значения до запятой\n     */\n    integerLength?: number;\n    /**\n     * Максимально допустимая длина значения после запятой\n     */\n    fractionLength?: number;\n    /**\n     * Толщина шрифта\n     */\n    bold?: boolean;\n    /**\n     * Отображение символа валюты\n     */\n    showCurrency?: boolean;\n    /**\n     * Международный код валюты\n     */\n    currencyCode?: string;\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     * */\n    'data-test-id'?: string;\n    /**\n     * Обработчик события, вызываемый при событии 'change'\n     * */\n    onChange?: (value?: string, amount?: number) => void;\n};\n\ntype MoneyInputState = {\n    value: string;\n}\n\n/**\n * Компонент поля для ввода суммы. Может принимать в качестве значения либо число, либо число с сотой долей.\n */\nexport class MoneyInput extends React.PureComponent<MoneyInputProps, MoneyInputState> {\n    protected cn = createCn('money-input');\n\n    static defaultProps: Partial<MoneyInputProps> = {\n        fractionLength: DEFAULT_FRACTION_SIZE,\n        integerLength: DEFAULT_INTEGER_SIZE,\n        bold: false,\n        showCurrency: false,\n        currencyCode: 'RUR',\n    };\n\n    state = {\n        value: '',\n    };\n\n    private maskPattern: string;\n\n    private mask: Mask;\n\n    root: HTMLInputElement;\n\n    private caretFixTimeout: ReturnType<typeof setTimeout> = null;\n\n    // eslint-disable-next-line camelcase\n    UNSAFE_componentWillMount() {\n        this.updateMaskByValue(this.getValue());\n    }\n\n    // eslint-disable-next-line camelcase\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        if (this.props.value !== nextProps.value) {\n            this.updateMaskByValue(nextProps.value || '');\n        }\n    }\n\n    componentWillUnmount() {\n        clearTimeout(this.caretFixTimeout);\n    }\n\n    render() {\n        return (\n            <div\n                className={ this.cn({\n                    currency: this.props.showCurrency,\n                    bold: this.props.bold,\n                    width: this.props.width,\n                }) }\n                data-test-id={ this.props['data-test-id'] }\n            >\n                <Input\n                    { ...this.props }\n                    ref={ (root) => {\n                        this.root = root;\n                    } }\n                    formNoValidate={ true }\n                    mask={ this.maskPattern }\n                    maxLength={ this.getMaxLength() }\n                    value={ this.getValue() }\n                    leftAddons={\n                        this.props.showCurrency ? (\n                            <span className={ this.cn('currency') }>\n                                <span className={ this.cn('value') }>{ this.getCurrencySpacer() }</span>\n                                <span>{ getCurrencySymbol(this.props.currencyCode) }</span>\n                            </span>\n                        ) : (\n                            this.props.leftAddons\n                        )\n                    }\n                    onChange={ this.handleChange }\n                    onProcessMaskInputEvent={ this.handleProcessMaskInputEvent }\n                />\n            </div>\n        );\n    }\n\n    private handleProcessMaskInputEvent = (event) => {\n        const currentValue = this.getValue();\n        const currentFormattedValue = this.mask.format(this.getValue());\n        let newValue = event.target.value;\n        const currentSelection = this.root.control.input.selectionStart;\n\n        // При удалении отрезаем запятую, если исчезла дробная часть.\n        if (newValue.length < currentFormattedValue.length) {\n            const fractionPart = getValueParts(newValue)[1]; // Берем значение после запятой\n\n            // `fractionPart !== undefined` - значит запятая введена, но\n            // `fractionPart.length === 0` - значит цифр после запятой нет.\n            if (fractionPart !== undefined && fractionPart.length === 0) {\n                newValue = newValue.substring(0, newValue.length - 1);\n                // eslint-disable-next-line no-param-reassign\n                event.target.value = newValue;\n            }\n        }\n\n        this.updateMaskByValue(newValue);\n\n        // При добавлении/изменении через selection последней цифры целой части каретка должна\n        // оставаться перед запятой\n        if (newValue.length >= currentValue.length && newValue[currentSelection] === ',') {\n            window.requestAnimationFrame(() => {\n                // Фикс бага смещения каретки в браузере на андроидах Jelly Bean (c 4.1 по 4.3)\n                const offsetSection = IS_ANDROID && parseFloat(getAndroidVersion() as string) < 4.4 ? 1 : 0;\n                const newSelectionStart = this.root.control.input.selectionStart - 1;\n\n                this.setInputSelection(newSelectionStart + offsetSection);\n            });\n        }\n    };\n\n    private handleChange = (value) => {\n        this.setState({ value });\n\n        if (this.props.onChange) {\n            this.props.onChange(value, Number(value.replace(/[^\\d,]/g, '').replace(/,/g, '.')));\n        }\n    };\n\n    /**\n     * Устанавливает фокус на поле ввода.\n     */\n    public focus() {\n        this.root.focus();\n    }\n\n    /**\n     * Убирает фокус с поля ввода.\n     */\n    public blur() {\n        this.root.blur();\n    }\n\n    /**\n     * Скроллит страницу до поля ввода.\n     */\n    public scrollTo() {\n        this.root.scrollTo();\n    }\n\n    /**\n     * Обновляет маску по значению: группирует целую часть в блоки по три символа.\n     *\n     * @param value Значение\n     */\n    private updateMaskByValue(value: string) {\n        const [integerPart, fractionPart] = getValueParts(value);\n\n        const integerPartLength = Math.max(Math.min(integerPart.length || 1, this.props.integerLength));\n\n        this.maskPattern = splitInteger(new Array(integerPartLength + 1).join('1'))\n            .reverse()\n            .join(' ');\n\n        if (fractionPart !== undefined && this.props.fractionLength > 0) {\n            this.maskPattern += `,${new Array(this.props.fractionLength + 1).join('1')}`;\n        }\n\n        this.mask = new Mask(this.maskPattern);\n\n        if (this.root) {\n            this.root.getMaskedInputInstance().setMask(this.maskPattern);\n        }\n    }\n\n    /**\n     * Расчитывает максимально допустимую длинну поля ввода.\n     */\n    private getMaxLength() {\n        let maxLength = Math.floor((this.props.integerLength - 1) / INTEGER_PART_SIZE) + this.props.integerLength;\n\n        if (this.props.fractionLength) {\n            maxLength += 1 + this.props.fractionLength;\n        }\n\n        return maxLength;\n    }\n\n    /**\n     * Возвращает актуальное значение для рендера.\n     */\n    private getValue() {\n        return this.props.value === undefined ? this.state.value : this.props.value;\n    }\n\n    /**\n     * Устанавливает каретку поля ввода в новую позицию.\n     *\n     * @param selection Новое положение каретки\n     */\n    private setInputSelection(selection: number) {\n        this.root.control.input.selectionStart = selection;\n        this.root.control.input.selectionEnd = selection;\n        // Android chrome имеет дефект с автоматической установкой каретки\n        // при использовании клавиатуры отличной от type=\"text\".\n        if (IS_ANDROID) {\n            this.setInputSelectionByTimeout(selection);\n        }\n    }\n\n    /**\n     * Устанавливает каретку поля ввода в заданную позицию асинхронно.\n     *\n     * Во-избежание дефекта с установкой каретки, наблюдаемом в мобильных браузерах,\n     * установка происходит асинхронно, с минимальной задержкой,\n     * с помощью [setTimeout] обертки.\n     *\n     * @param selection Положение каретки\n     */\n    private setInputSelectionByTimeout(selection: number) {\n        clearTimeout(this.caretFixTimeout);\n\n        this.caretFixTimeout = setTimeout(() => {\n            this.root.control.input.selectionStart = selection;\n            this.root.control.input.selectionEnd = selection;\n        }, 0);\n    }\n\n    /**\n     * Возвращает значение (невидимый текст) для корректного отображения значка валюты.\n     */\n    private getCurrencySpacer() {\n        return this.mask.format(this.getValue()) || this.props.placeholder;\n    }\n}\n\nexport default withTheme<MoneyInputProps, MoneyInput>(MoneyInput);\n"]}