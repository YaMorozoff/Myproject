{"version":3,"sources":["button/button.tsx"],"names":[],"mappings":"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","file":"button.d.ts","sourcesContent":["/* This Source Code Form is subject to the terms of the Mozilla Public\n * License, v. 2.0. If a copy of the MPL was not distributed with this\n * file, You can obtain one at http://mozilla.org/MPL/2.0/. */\n\nimport React from 'react';\nimport { createCn } from 'bem-react-classname';\nimport { withTheme } from '../cn';\nimport keyboardCode from '../lib/keyboard-code';\n\nexport type ButtonProps = {\n\n    /**\n     * Текст кнопки\n     */\n    text?: React.ReactNode;\n\n    /**\n     * Иконка кнопки\n     */\n    icon?: React.ReactNode;\n\n    /**\n     * Список произвольных элементов в левом слоте\n     */\n    rightAddons?: React.ReactNode;\n\n    /**\n     * Список произвольных элементов в правом слоте\n     */\n    leftAddons?: React.ReactNode;\n\n    /**\n     * Тип кнопки\n     */\n    view?: 'default' | 'action' | 'extra' | 'rounded';\n\n    /**\n     * Поведение кнопки\n     */\n    type?: 'button' | 'reset' | 'submit';\n\n    /**\n     * HTML элемент, которым будет компонент в DOM\n     */\n    tag?: 'button' | 'span';\n\n    /**\n     * Управление шириной кнопки. При значении 'available' растягивает кнопку на ширину родителя\n     */\n    width?: 'default' | 'available';\n\n    /**\n     * Размер компонента\n     */\n    size?: 's' | 'm' | 'l' | 'xl';\n\n    /**\n     * Управление возможности взаимодействия с компонентом\n     */\n    disabled?: boolean;\n\n    /**\n     * Отображение кнопки в состоянии фокуса\n     */\n    focused?: boolean;\n\n    /**\n     * Псевдо представление кнопки\n     */\n    pseudo?: boolean;\n\n    /**\n     * Идентификатор компонента в DOM\n     */\n    id?: string;\n\n    /**\n     * Отключает валидацию полей формы, у которых есть атрибут pattern\n     */\n    formNoValidate?: boolean;\n\n    /**\n     * Имя компонента в DOM\n     */\n    name?: string;\n\n    /**\n     * Текст всплывающей подсказки\n     */\n    title?: string;\n\n    /**\n     * Последовательность перехода между контролами при нажатии на Tab\n     */\n    tabIndex?: number;\n\n    /**\n     * Тип переключателя\n     */\n    togglable?: 'check' | 'radio';\n\n    /**\n     * Отображение кнопки в отмеченном (зажатом) состоянии\n     */\n    checked?: boolean;\n\n    /**\n     * Дочерние элементы `Button`\n     */\n    children?: React.ReactNode;\n\n    /**\n     * Идентификатор для систем автоматизированного тестирования\n     */\n    'data-test-id'?: string;\n\n    /**\n     * Тема компонента\n     */\n    theme?: 'alfa-on-color' | 'alfa-on-white';\n\n    /**\n     * Дополнительный класс\n     */\n    className?: string;\n\n    /**\n     * Обработчик клика по кнопке\n     */\n    onClick?: (event?: React.MouseEvent<any>) => void;\n\n    /**\n     * Обработчик фокуса кнопки\n     */\n    onFocus?: (event?: React.FocusEvent<any>) => void;\n\n    /**\n     * Обработчик снятия фокуса кнопки\n     */\n    onBlur?: (event?: React.FocusEvent<any>) => void;\n\n    /**\n     * Обработчик события наведения курсора на кнопку\n     */\n    onMouseEnter?: (event?: React.MouseEvent<any>) => void;\n\n    /**\n     * Обработчик события снятия курсора с кнопки\n     */\n    onMouseLeave?: (event?: React.MouseEvent<any>) => void;\n\n    /**\n     * Обработчик события нажатия кнопки мыши в момент\n     */\n    onMouseDown?: (event?: React.MouseEvent<any>) => void;\n\n    /**\n     * Обработчик события отжатия кнопки мыши в момент\n     */\n    onMouseUp?: (event?: React.MouseEvent<any>) => void;\n\n    /**\n     * Обработчик события отведения курсора с кнопки\n     */\n    onMouseOut?: (event?: React.MouseEvent<any>) => void;\n\n    /**\n     * Обработчик события нажатия на клавишу клавиатуры в момент, когда фокус находится на компоненте\n     */\n    onKeyDown?: (event?: React.KeyboardEvent<any>) => void;\n\n    /**\n     * Обработчик события отжатия на клавишу клавиатуры в момент, когда фокус находится на компоненте\n     */\n    onKeyUp?: (event?: React.KeyboardEvent<any>) => void;\n\n};\n\ntype ButtonState = {\n    focused: boolean;\n    hovered: boolean;\n    pressed: boolean;\n}\n\n/**\n * Компонент кнопки (да, она нажимается!).\n */\nexport class Button extends React.PureComponent<ButtonProps, ButtonState> {\n    protected cn = createCn('button');\n\n    static defaultProps: Partial<ButtonProps> = {\n        type: 'button',\n        tag: 'button',\n        size: 'm',\n        formNoValidate: false,\n    };\n\n    static getDerivedStateFromProps(nextProps: ButtonProps): Partial<ButtonState> | null {\n        if (nextProps.disabled) {\n            return {\n                hovered: false,\n                focused: false,\n            };\n        }\n\n        return null;\n    }\n\n    state = {\n        focused: false,\n        hovered: false,\n        pressed: false,\n    };\n\n    private control: HTMLButtonElement | HTMLSpanElement;\n\n    render() {\n        const isButton = this.props.tag !== 'span';\n\n        const buttonProps = {\n            ref: (control) => {\n                this.control = control;\n            },\n            role: 'button',\n            id: this.props.id,\n            name: this.props.name,\n            type: this.props.type,\n            title: this.props.title,\n            tabIndex: this.props.disabled ? -1 : this.props.tabIndex,\n            disabled: this.props.disabled,\n            formNoValidate: isButton ? this.props.formNoValidate : null,\n            className: this.cn({\n                disabled: this.props.disabled,\n                pseudo: this.props.pseudo,\n                view: this.props.view,\n                size: this.props.size,\n                width: this.props.width,\n                focused: this.props.focused === undefined ? this.state.focused : this.props.focused,\n                hovered: this.state.hovered,\n                pressed: this.state.pressed,\n                togglable: this.props.togglable,\n                checked: this.props.checked,\n            }),\n            onClick: this.handleClick,\n            onFocus: this.handleFocus,\n            onBlur: this.handleBlur,\n            onMouseEnter: this.handleMouseEnter,\n            onMouseLeave: this.handleMouseLeave,\n            onMouseDown: this.handleMouseDown,\n            onMouseUp: this.handleMouseUp,\n            onMouseOut: this.handleMouseOut,\n            onKeyDown: this.handleKeyDown,\n            onKeyUp: this.handleKeyUp,\n            'data-test-id': this.props['data-test-id'],\n        };\n\n        const buttonContent = [\n            this.props.leftAddons && (\n                <span key=\"left-addons\" className={ this.cn('addon') }>\n                    { this.props.leftAddons }\n                </span>\n            ),\n            (this.props.children || this.props.text || this.props.icon) && (\n                <span key=\"content\" className={ this.cn('content') }>\n                    { this.props.icon && (\n                        <span key=\"icon\" className={ this.cn('icon') }>\n                            { this.props.icon }\n                        </span>\n                    ) }\n                    { (this.props.children || this.props.text) && (\n                        <span key=\"text\" className={ this.cn('text') }>\n                            { this.props.children || this.props.text }\n                        </span>\n                    ) }\n                </span>\n            ),\n            this.props.rightAddons && (\n                <span key=\"right-addons\" className={ this.cn('addon') }>\n                    { this.props.rightAddons }\n                </span>\n            ),\n        ];\n\n        return isButton ? (\n            // eslint-disable-next-line react/button-has-type\n            <button { ...buttonProps }>{ buttonContent }</button>\n        ) : (\n            <span { ...buttonProps }>{ buttonContent }</span>\n        );\n    }\n\n    private handleClick = (event) => {\n        if (this.props.onClick) {\n            this.props.onClick(event);\n        }\n    };\n\n    private handleFocus = (event) => {\n        if (this.state.pressed) {\n            return;\n        }\n\n        this.setState({ focused: true });\n\n        if (this.props.onFocus) {\n            this.props.onFocus(event);\n        }\n    };\n\n    private handleBlur = (event) => {\n        this.setState({ focused: false });\n\n        if (this.props.onBlur) {\n            this.props.onBlur(event);\n        }\n    };\n\n    private handleMouseEnter = (event) => {\n        if (!this.props.disabled) {\n            this.setState({ hovered: true });\n        }\n\n        if (this.props.onMouseEnter) {\n            this.props.onMouseEnter(event);\n        }\n    };\n\n    private handleMouseLeave = (event) => {\n        if (!this.props.disabled) {\n            this.setState({ hovered: false });\n        }\n\n        if (this.props.onMouseLeave) {\n            this.props.onMouseLeave(event);\n        }\n    };\n\n    private handleMouseDown = (event) => {\n        if (!this.props.disabled) {\n            this.setState({ pressed: true });\n        }\n\n        if (this.props.onMouseDown) {\n            this.props.onMouseDown(event);\n        }\n    };\n\n    private handleMouseUp = (event) => {\n        if (!this.props.disabled) {\n            this.setState({ pressed: false });\n        }\n\n        if (this.props.onMouseUp) {\n            this.props.onMouseUp(event);\n        }\n    };\n\n    private handleMouseOut = (event) => {\n        if (!this.props.disabled) {\n            this.setState({ pressed: false });\n        }\n\n        if (this.props.onMouseOut) {\n            this.props.onMouseOut(event);\n        }\n    };\n\n    private handleKeyDown = (event) => {\n        if ((event.which === keyboardCode.ENTER || event.which === keyboardCode.SPACE) && !this.props.disabled) {\n            this.setState({ pressed: true });\n        }\n\n        if (this.props.onKeyDown) {\n            this.props.onKeyDown(event);\n        }\n    };\n\n    private handleKeyUp = (event) => {\n        if ((event.which === keyboardCode.ENTER || event.which === keyboardCode.SPACE) && !this.props.disabled) {\n            this.setState({ pressed: false });\n        }\n\n        if (this.props.onKeyUp) {\n            this.props.onKeyUp(event);\n        }\n    };\n\n    /**\n     * Возвращает корневой `HTMLElement` компонента.\n     */\n    public getNode() {\n        return this.control;\n    }\n\n    /**\n     * Устанавливает фокус на поле ввода.\n     */\n    public focus() {\n        this.control.focus();\n    }\n\n    /**\n     * Убирает фокус с поля ввода.\n     */\n    // eslint-disable-next-line class-methods-use-this\n    public blur() {\n        if (document.activeElement) {\n            (document.activeElement as HTMLElement).blur();\n        }\n    }\n}\n\nexport default withTheme<ButtonProps, Button>(Button);\n"]}